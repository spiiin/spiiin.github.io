<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spiiin&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://spiiin.github.io/"/>
  <updated>2024-12-18T22:26:03.000Z</updated>
  <id>http://spiiin.github.io/</id>
  
  <author>
    <name>spiiin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Рандомные мысли про функциональные языки программирования</title>
    <link href="http://spiiin.github.io/blog/3007069853/"/>
    <id>http://spiiin.github.io/blog/3007069853/</id>
    <published>2024-12-18T22:26:03.000Z</published>
    <updated>2024-12-18T22:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Решил поучаствовать в <a href="https://adventofcode.com/2024">AdventOfCode</a> на <a href="https://github.com/spiiin/advent_of_code">F#</a> (<a href="https://adventofcode.com/2024/leaderboard/private/view/393584">лидерборд</a>). Не помню откуда, но знаю синтаксис ML (кажется когда-то на F# 2.0 смотрел), так что только немного прочитал про язык в общем, и поставил себе условие не скатываться в <code>let mutable x</code>, а писать в функциональном стиле. Немного заметок по ходу.</p><div class="toc"><!-- toc --><ul><li><a href="#derevya-iz-dannyh-i-koda">Деревья из данных и кода</a></li><li><a href="#spiski-iz-dannyh-i-koda">Списки из данных и кода</a></li><li><a href="#cherepashki-i-sintonnost">Черепашки и синтонность</a></li><li><a href="#pro-kod-kak-sposob-rasshireniya-sushchestvuyushchih-sistem">Про код как способ расширения существующих систем</a></li></ul><!-- tocstop --></div><h2><span id="derevya-iz-dannyh-i-koda">Деревья из данных и кода</span><a href="#derevya-iz-dannyh-i-koda" class="header-anchor">#</a></h2><p>Программист смотрит на код как на текст, но тулзам и компиляторам удобнее иметь более высокоуровневое представление. Для них программа — это дерево выражений (AST). AST можно рассматривать как <code>model</code> в MVC, тогда как её текст - это <code>view/controller</code>.</p><p>При этом, если программист пишет программы, которые обрабатывают код  (плагины к ide/компилятору, кодогенераторы, синтаксические макросы, парсеры) — то он должен знать не только синтаксис своего языка, но и работать с его синтаксическим деревом (если и программа, и код, который она обрабатывает на одном языке).</p><p><strong>Такая работа будет проще, если:</strong></p><ul><li>синтаксис программы удобно проецировать на генерируемый AST (код программы можно мысленно легко отобразить на дерево, и обратно). То есть синтаксис является не только вопросом вкуса, но и способом уменьшить ментальные усилия при программировании</li><li>язык предлагает удобное представления для кода обработки деревьев (в основном — что умеет и как расширяется pattern matching)</li><li>язык предлагает средства трансформации своего собственного представления из одного в другое (цитирование, синтаксические макросы), чтобы изменять собсвенный синтаксический view.</li></ul><p><a href="https://graydon.livejournal.com/256533.html">“What next?”</a> - автор rust об идеях в языках программирования. <em>Open implementations</em> — дизайн языка с предпосылкой о том, чтобы компилятор (или программист) был в любой момент “на связи” с программой ведёт к определённой эстетике языка, оказывает давление (в сторону программируемости) на синтаксис, систему типов, модель компиляции (<em>проще, единообразнее, программируемо</em>)</p><p><a href="https://parentheticallyspeaking.org/articles/bicameral-not-homoiconic/">Bicameral, Not Homoiconic</a> — о Lispy-языках и идее <code>Syntax is a view</code>. Языки могут разделять <em>философию синтаксиса</em>, но отличаться в деталях.</p><p><em>S-выражения удобны для представления синтаксического дерева, но не всегда удобны для человека. Имхо, философия синтаксиса ML намного приятнее. Хотя некоторые не любят ни скобок, ни значащих отступов. Но синтаксис — это только “фронтэнд” языка, “бекэнд” — это то, как компилятор/интерпретатор может обрабатывать построенное синтаксическое дерево. От синтаксиса эта не зависит почти никак</em>.</p><p><a href="https://d22yoqkt46k26p.cloudfront.net/graydon/talks/CompilerTalk-2019.pdf">21 compilers and 3 orders of magnitude in 60 minutes</a> - ML designed as implementation language for symbolic logic (expression-tree wrangling) system</p><p>Данные тоже удобно представлять как дерево (<code>json/xml/yaml/toml/cue/etc</code>) — узлы могут быть атомами, либо деревьями данных. Форматы для описания данных обычно не предполагают описания правил интерпретации этих данных.</p><p>Но эволюция систем, которые используют описания данных в таких упрощенных форматах,  приводит их к тому, чтобы начать хранить внутри данных код. Причины могут быть разными:</p><ul><li>уменьшение избыточности описания (в качестве примера подойдут всякие текстовые template-движки, или какие-нибудь системы анимации типа <a href="https://youtu.be/GlQJvuU7Z_8?si=iKBr9m4ELN0id2wC&amp;t=1498">Nodezator</a>) </li><li>необходимость задания связей между различными частями одного описания, или с внешними данными/кодом (валидации значений, взаимо-зависимости, реактивная связь с внешним источником, пользовательские типы объектов с уникальными правилами конфигурации)</li><li>желание описать поведение данных во времени</li><li>необходимость сложной конфигурации с помощью данных (например xml в ant или spring)</li></ul><p>Причём выбор способа представления такого кода внутри данных — сложная задача. С одной стороны, не хочется опускаться до описания кода строками (ведь почти точно нужен не какой-то посторонний код, а обрабатывающий эти данные). С другой стороны, добавлять полноценный ast для кода внутри данных выглядит овер-инжинирингом. В итоге создаются упрощенные микроязыки, которые постоянно требуют расширения. </p><p><em>В качестве примера можно погуглить недоумение обнаруживающих, что в WPF XAML отсутствует оператор <code>not</code></em></p><p><a href="https://probablydance.com/2015/02/16/ideas-for-a-programming-language-part-3-no-shadow-worlds/">Ideas for a Programming Language Part 3: No Shadow Worlds</a> — микроязыки как теневые разрастающиеся миры</p><p>Хорошие примеры “данных с внедрённым кодом” — <code>табличные редакторы и SQL</code>.</p><h2><span id="spiski-iz-dannyh-i-koda">Списки из данных и кода</span><a href="#spiski-iz-dannyh-i-koda" class="header-anchor">#</a></h2><p>Код трансформации списков часто можно разделить на две части:</p><ul><li>как обрабатывается элемент списка,</li><li>как соединяются обработанные коллекции вместе.</li></ul><p><em>код который на императивном языке выглядел бы линейно, тут разделяется на 2 части, соединение коллекций друг с другом — оригами-программирование. При этом если встречается линейный код, обёрнутый в вычислительное выражение, то скорее всего между строк спрятано что-то монадное, и вычисления будут далеко нелинейными</em></p><p>Синтаксис может либо способствовать визуальному/мысленному отделению этих потоков друг от друга, либо мешать.</p><p><a href="https://probablydance.com/2015/06/16/ideas-for-a-programming-language-part-4-reactive-programming/">Ideas for a Programming Language Part 4: Reactive Programming</a> - о синтаксисе для обработки списков.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">std::</span><span style="color: #DCDCAA">transform</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">vec</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">begin</span><span style="color: #E6E6E6">(), </span><span style="color: #9CDCFE">vec</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">end</span><span style="color: #E6E6E6">(), std::</span><span style="color: #DCDCAA">back_inserter</span><span style="color: #E6E6E6">(ovec), [](</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">a</span><span style="color: #E6E6E6">){ </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> a </span><span style="color: #D4D4D4">+</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">5</span><span style="color: #E6E6E6">; });</span></span><span class="line"><span style="color: #9CDCFE">ovec</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">erase</span><span style="color: #E6E6E6">(std::</span><span style="color: #DCDCAA">remove_if</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">ovec</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">begin</span><span style="color: #E6E6E6">(), </span><span style="color: #9CDCFE">ovec</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">end</span><span style="color: #E6E6E6">(), [](</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">a</span><span style="color: #E6E6E6">){ </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> a </span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">10</span><span style="color: #E6E6E6">; }), </span><span style="color: #9CDCFE">ovec</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">end</span><span style="color: #E6E6E6">());</span></span><span class="line"><span style="color: #6A9955">//сложно визуально отделить поток преобразований элемента (a -&gt; a+5) и (a -&gt; a&gt;10) от потока транформаций</span></span></code></pre></div></div></figure><ul><li><a href="/blog/2550823652/" title="Итераторы, колстеки, корутины">Итераторы, колстеки, корутины</a> - этот же синтаксический узор встречается не только в обработке списков, но и любых коллекций</li></ul><p>В ML-синтаксисе без лишних скобок выглядит так:<br><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #C586C0">let</span><span style="color: #E6E6E6"> ovec </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #E6E6E6">vec</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> List</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">map (fun a </span><span style="color: #D4D4D4">-&gt;</span><span style="color: #E6E6E6"> a </span><span style="color: #D4D4D4">+</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">5</span><span style="color: #E6E6E6">) </span><span style="color: #6A9955">//or ((+) 5)</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> List</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">filter (fun a </span><span style="color: #D4D4D4">-&gt;</span><span style="color: #E6E6E6"> a </span><span style="color: #D4D4D4">&lt;=</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">10</span><span style="color: #E6E6E6">) </span><span style="color: #6A9955">//or (&gt;=) 10)</span></span><span class="line"><span style="color: #6A9955">//or |&gt; List.choose (fun a -&gt; if a + 5 &lt;= 10 then Some(a + 5) else None)</span></span><span class="line"><span style="color: #6A9955">//or |&gt; List.collect (fun a -&gt; if a + 5 &lt;= 10 then [a + 5] else [])</span></span></code></pre></div></div></figure><br>Здесь легче отделить отделить поток оригами-функций для коллекций <code>map |&gt; filter</code> от функций преобразования элемента.<br><a href="https://www.youtube.com/watch?v=6mTbuzafcII">Transducers by Rich Hickey</a> - Рич Хики от том, что имя коллекции (<code>List.</code>) перед именами функций в принципе можно было бы и выбросить.</p><p><em>В таком стиле необходимо отлично ориентироваться в наборе этих оригами-функций, поиск нужного иногда напоминает поиск подходящего кусочка пазла. Причём подходить могут несколько, но подобрать сходу какие именно, сложно. Порой даже забываешь, что Хиндли-Милнер твои друзья. Но в принципе, доверить поиск соединителей можно ИИ, главное, не забыть, что кроме соответвия типов, функции могут отличаться по поведению и выбрать из нескольких предложенных подходящую по поведению.</em></p><p><a href="https://probablydance.com/2016/02/27/functional-programming-is-not-popular-because-it-is-weird/">Functional Programming Is Not Popular Because It Is Weird</a></p><p>Из плюсов такого подхода — часть вычислений можно распараллелить просто добавив в поток “оригами-функций” распараллеливание<br><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #C586C0">let</span><span style="color: #E6E6E6"> more </span><span style="color: #D4D4D4">=</span></span><span class="line"><span style="color: #E6E6E6">sortedPaths</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> PSeq</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">withDegreeOfParallelism Environment</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">ProcessorCount </span><span style="color: #6A9955">//обрабатываем параллельно</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> PSeq</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">collect (fun path </span><span style="color: #D4D4D4">-&gt;</span></span><span class="line"><span style="color: #E6E6E6">moves</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> Seq</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">map (fun move </span><span style="color: #D4D4D4">-&gt;</span><span style="color: #E6E6E6"> path</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">Extend(move, endState, rate))</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> Seq</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">filter filterPath</span></span><span class="line"><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> Seq</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">toList</span></span></code></pre></div></div></figure></p><p><a href="http://venge.net/graydon/talks/VectorizedInterpretersTalk-2023-05-12.pdf">Vectorized Interpreters</a> — про векторизированные интерпретаторы, в которых можно избежать прыжков между вызывающим/вызываемым кодом. Происходит сначала настройка путей выполнения кода, а затем вызов вычисления всего построенного выражения в нейтивном коде (в качестве примеров — <code>Numpy/R/Matlab</code>).</p><p><em>настройка gpu на cpu перед запуском вычислений — это тоже векторизированный интерпретатор</em></p><p><em>еще один отбитый вариант синтаксиса, берущий худшее из обоих миров (не видно ни 2 столбцов, ни императивности в теле лямбд) — записывать все операторы в строку: <code>ovec =: (&gt;. 10&amp;&lt;) @: (5&amp;+)&quot;0 vec</code></em></p><h2><span id="cherepashki-i-sintonnost">Черепашки и синтонность</span><a href="#cherepashki-i-sintonnost" class="header-anchor">#</a></h2><p><a href="https://worrydream.com/LearnableProgramming/">Learnable Programming - Designing a programming system for understanding program</a> - статья Виктора Брата о том, как проектировать системы так, чтобы можно было понимать написанные в них программы. Традиционно относится к обучению программированию, но полезно для любых систем.</p><p><em>Брат и сам по себе крут, и часто ссылается на Алана Кея и Сеймура Пайперта</em></p><blockquote><p>Maybe we don’t need a silver bullet. We just need to take off our blindfolds to see where we’re firing.</p></blockquote><p>В статье приводится рекомендация книги <a href="https://worrydream.com/refs/Papert_1980_-_Mindstorms,_1st_ed.pdf">Seymour Papert’s “Mindstorms”</a>, с описанием того, как проектировался и работает язык LOGO, и знаменитая черепашья графика в нём. Важное свойство черепашки — <strong><code>синтонность</code></strong> другим объектам.</p><p>“Если не знаешь, как нарисовать с помощью черепашки круг, представь себя черепашкой”. Даже ребёнок знает, как ходить по кругу, но не задумывается об алгоритме. Кроме того, более взрослый программист может не ходить по кругу, а моделировать работу черепашки с помощью листа бумаги и ручки. Компьютерная черепашка синтонна телу, или физическому роботу, который умеет выполнять те же команды. Но кроме этого она также синтонна математическому объекту, абстракции, с помощью которой можно понять принципы и приёмы программирования (аргументы, рекурсия, отладка), или дифференциальное исчисление. Черепашка позволяет развивать эмпанию так, чтобы было проще осваивать сложные концепции.</p><p><strong>В широком смысле, все доступные нам способы познания — это разделение объекта на части+пересборка, и эмпатия (имперсонификация)</strong> — <a href="https://youtu.be/I8LbkfSSR58?si=OVQEC_tWjknqgALI&amp;t=2085">теория категорий 1.1: Мотивация и философия</a><br><em>(и эти навыки не обязательно коррелируют с умением решать логические задачки)</em></p><p>Проблема функциональных языков в том, что у них нет своей черепашки, развивающей нужную интуицию (<a href="https://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/">1</a>, <a href="https://fsharpforfunandprofit.com/posts/why-i-wont-be-writing-a-monad-tutorial/">2</a>) - <a href="https://mbuffett.com/posts/all-tacit-knowledge/">Programming and Tacit Knowledge</a> Наиболее полезная абстракция, кажется — <strong><code>железнодорожные пути и паровозики с вагонами, в которых лежат данные</code></strong>.</p><h2><span id="pro-kod-kak-sposob-rasshireniya-sushchestvuyushchih-sistem">Про код как способ расширения существующих систем</span><a href="#pro-kod-kak-sposob-rasshireniya-sushchestvuyushchih-sistem" class="header-anchor">#</a></h2><p>Текстовый редактор может обращаться к структурам в AST, за данными для подсветки, рефакторинга или структурного редактирования. Если это нужно для интерактивного редактирования (т.е. всегда), то удобнее изменения дерева, а не строить его заново.</p><p><a href="https://youtu.be/Jes3bD6P0To?si=0G4Ugppx-qcp9w6B&amp;t=957">Tree-sitter - a new parsing system for programming tools</a> by Max Brunsfeld - структурное выделение текста в редакторе.</p><p>Компилятор может иметь хуки для встраивания своих вычислений, чтобы (в порядке от простого к продвинутому):</p><ul><li>генерировать код — templates в С++</li><li>изменять код произвольным образом — синтаксические макросы</li><li>производить произвольные вычисления - <a href="https://youtu.be/UTqZNujQOlA?si=37vNnAEI2fE13hBZ&amp;t=4755">Jai</a> или <a href="https://learn.microsoft.com/en-us/dotnet/fsharp/tutorials/type-providers/">Type Providers</a> в F#.</li></ul><p>Если язык не проектировался с целью делать что-то во время компиляции, то встроить в него позже что-нибудь сложнее генерации кода будет сложно (и то, иногда парсинг кода проще сделать внешним препроцессором).</p><p>Метаинформация в коде может быть адресована не IDE/компилятору, а среде, в которой он будет выполняться — какие-нибудь <a href="https://docs.godotengine.org/en/stable/tutorials/scripting/c_sharp/c_sharp_differences.html#onready-annotation">аннотации</a>  для редактора в Godot или Unity. Это вроде не требуют особого синтаксиса, кроме конвенций об именах (которые вообще-то по хорошему тоже нужно заставить проверять компилятор, а не внешний скрипт, или хуже, run-time среду).</p><p> Ну и, собственно, среда выполнения может уметь собирать из рантайм объектов, построенных с помощью этой метаинформации, другие составные объекты. Для построения помощью встроить скриптовый или визуальный язык (<code>Dataflow/Block/Event tables</code>), отличающийся от исходного языка. Или можно тащить в рантайм компилятор основого языка, если он не монструозный.</p><ul><li><a href="/blog/3414198781/" title="Визуальные языки программирования">Визуальные языки программирования</a></li><li><a href="/blog/3601773065/" title="Рандомные мысли про код, дизайн, C++ и геймдев">Рандомные мысли про код, дизайн, C++ и геймдев</a> — раздел про волны развития технологий. Более зрелый язык обрастает тулзами с способами связи его с внешними системами предметной области.</li></ul><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;Решил поуч
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="fsharp" scheme="http://spiiin.github.io/tags/fsharp/"/>
    
  </entry>
  
  <entry>
    <title>aider</title>
    <link href="http://spiiin.github.io/blog/4269339516/"/>
    <id>http://spiiin.github.io/blog/4269339516/</id>
    <published>2024-12-18T22:17:09.000Z</published>
    <updated>2024-12-18T22:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p><a href="https://aider.chat/">Aider</a> — интерфейс между LLMs и терминалом (или комментариями в коде). Отслеживает изменения, грепает куски кода, переписывает и коммитит изменения в гит.<br>Использует <a href="/blog/433986896/" title="Tree sitter">Tree sitter</a>, за счёт чего можно вкрутить новые языки, добавив несколько S-выражений (попробовал для <a href="https://github.com/Aider-AI/aider/issues/2470">F#</a>)</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
      <category term="ai" scheme="http://spiiin.github.io/tags/ai/"/>
    
      <category term="fsharp" scheme="http://spiiin.github.io/tags/fsharp/"/>
    
  </entry>
  
  <entry>
    <title>Tree sitter</title>
    <link href="http://spiiin.github.io/blog/433986896/"/>
    <id>http://spiiin.github.io/blog/433986896/</id>
    <published>2024-12-18T00:12:09.000Z</published>
    <updated>2024-12-18T00:12:09.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p><a href="https://tree-sitter.github.io/tree-sitter/">Tree-sitter</a> — библиотека на rust, в которой можно с помощью javascript описать грамматику любого языка. Она скомпилится в парсер на C и привязки к ещё пачке языков.</p><p>Кроме большого количества <a href="https://github.com/tree-sitter/tree-sitter/wiki/List-of-parsers">парсеров</a> для разных языков имеет lisp-like язык запросов к AST-дереву.</p><p>С ним можно <a href="https://tree-sitter.github.io/tree-sitter/playground">поиграться</a> онлайн — подсвечивает в реальном времени блоки кода, соотвествующие описанным ast-запросам.</p><p>Может использоваться для очень умной подсветки (включая файлы на нескольких языках, вроде встроенных языков), умного грепания кода (для <a href="https://ast-grep.github.io/playground.html">рефактора</a>, составления Table of Contents кода на github, <a href="https://youtu.be/Jes3bD6P0To?si=_B6gsDe71TqMhBTC&amp;t=980">структурного редактирования</a> или <a href="https://github.com/Aider-AI/grep-ast">копилотирования</a> с ИИ).</p><p>Вообще выглядит как будто им можно попробовать генерировать байндинги с сишного кода вместо clang-а (или с других форматов описания)</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>Про изучение английского-2</title>
    <link href="http://spiiin.github.io/blog/566935799/"/>
    <id>http://spiiin.github.io/blog/566935799/</id>
    <published>2024-12-16T23:54:04.000Z</published>
    <updated>2024-12-16T23:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p><a href="/blog/2455145615/" title="Про изучение английского">Про изучение английского</a> — первая часть</p><p>Из работающих для меня методов изучения заметил два. Первый — <code>найти человека, с которым можно выстроить свой микро-язык</code>, изначально вообще слабо похожий на тот, который изучаешь, и постепенно развивать его, добавляя правила. Так, как происходит между ребёнком и матерью, или между мужем и женой, говорящими на разных языках (или совместно изучающих один язык). С учителем так сложно, из-за того, что ему придётся не учить, а учиться этому микро-языку самому. Возможно, хорошим партнёром может стать ИИ, но пока заставить его говорить по выдуманным правилам сложнее, чем может показаться (подозреваю, что он не очень любит агглютинативные языки).</p><p>Второй — <code>найти модель, на которую можно опереться, что понять грамматические правила совсем без привязки к словам</code>. Собственно, доступная модель одна — уже известный язык. Т.е. попробовать представить, как работало бы правило из чужого языка на твоём языке. Это наиболее естественный и понятный способ “пробовать” язык, который зачем-то любят запрещать делать в школах.</p><p>Наверное, появляются дополнительные инструменты, когда знаешь несколько языков. Например, если бы я знал сербский с его перфектами, то понимание их в английском не понадобилось бы. Но учить промежуточный или искусственный язык выглядит непрактичным, если только он не нужен сам по себе.</p><p><strong><code>Строить свой язык круче, чем зубрить чужой</code></strong></p><p>Ну а дальше, кроме правил — нужно наполнение содержимым.<br>Слова — из толкового словаря, плюс из материалов на темы увлечений.<br>Фразы — фразовые глаголы, идиомы, коллокации, вылавливать в речи.</p><h2><span id="audirovanie">Аудирование</span><a href="#audirovanie" class="header-anchor">#</a></h2><p>Для меня есть три уровня аудирования:</p><ul><li>Понимаешь учебные материалы. </li></ul><p>То есть текст с экзаменов типа IELTS начитанный специально упрощённо.</p><ul><li>Понимаешь речь актёров или профессиональных дикторов </li></ul><p>Где-то посередине этого уровня большинство и застревает. Кроме чисто аудирования здесь уже часть непереводимого материала есть, который будешь пропускать больше в сериалах, меньше в книге, если от переводчиков есть сноски с объяснениями. Нейронки тоже иногда могут помочь восстановить, на что намекал автор (не переводческие, а general). В качестве известного примера – щенок бульдога доктора Ватсона.</p><ul><li>Понимаешь зашумленную произвольную речь нейтивов, разговаривающих между собой. </li></ul><p>Ну, или когда актёры/дикторы начинают говорить как будто не на камеру. Примеры - bloopers из сериалов, шотландский акцент (хотя бы примерно о чём речь), эмоциональный спор с перебиванием друг друга в подкастах.<br>Между каждым из уровней пропасть.</p><p>По идее, еще 4-й уровень – когда понимаешь культуру и можешь переключаться на ментальность носителей, но я не знаю, можно ли так с английским, кажется, максимум для славянских языков возможно.</p><h2><span id="kak-ya-sinhroniziroval-vlastelina-kolec-s-ego-perevodom-i-audioversiey">Как я синхронизировал Властелина Колец с его переводом и аудиоверсией</span><a href="#kak-ya-sinhroniziroval-vlastelina-kolec-s-ego-perevodom-i-audioversiey" class="header-anchor">#</a></h2><p>В ходе попыток прокачать навыки аудирования захотел попробовать собрать себе аналог <a href="https://www.amazon.com/Whispersync-for-Voice/b?ie=UTF8&amp;node=12527156011">WhysperSync</a>.</p><p>Т.е. синхронизировать текст книги с её аудиоверсией, и добавить рядом еще литературный перевод. Но локально, без необходимости покупать книги в определенных сторах и отдавать задачи на чужие сервера с LLM.</p><p>Для теста выбрал <code>&quot;Властелина Колец&quot;</code> – он сложный с точки зрения грамматики, и <a href="https://disgustingmen.com/reading/lord-of-the-rings-tolkien-translations">известен фантазией переводчиков</a>. Для начала проверил, что chat-gpt справляется с задачей синхронизации двух переводов средне, с какого-то момента начинает галлюцинировать, и вдобавок быстро отказывается работать с защищенным авторскими правами текстом (хотя если владеешь двуми книгами и одной аудиокнигой – нет ничего криминального в том, чтобы просто читать и слушать их синхронно). Но где не справляется одна нейронка, справятся 3-4 других вместе.</p><p>Сначала задача не показалась сложной. <code>Whisper</code> от OpenAI запускается локально, и если скормить ему текст книги и аудио, выдаёт хорошие результаты.<br><a href="https://github.com/kanjieater/SubPlz">SubPlz</a> - неплохая обёртка для него от фанатов аниме. Немного программерской магии с версиями Python и Cuda (а также <a href="https://github.com/spiiin/ATS">фиксов</a> их core lib с кодировками и английским языком вместо японского) – и он отлично работает на локальной видеокарте. На выходе получаются субтитры на английском. Из приятных бонусов – Whisper работает с любыми языками.</p><p>Дальше оказалось сложнее. Сопоставить английскую фразу русской из перевода совсем нетривиально. В теории – с этим должны справляться мультиязыковые модели <code>BERT</code>. На практике почему-то не справлялись. Изначальная задумка была попробовать сопоставить английскую фразу всем вариантам различной длины на русском и выбрать лучшую.</p><p><a href="/blog/566935799/awesome_align.png"><img src="/blog/566935799/awesome_align_small.png" alt></a></p><p>Стабильного результата таким образом добиться не удалось даже с разными метриками и вариациями алгоритма – очистка токенов, динамическое программирование с попыткой предсказать несколько следующих фраз, хитрое нормирование по длине фраз, и прочая магия-вуду не помогли. Вдобавок, работа с фразами из субтитров, а не целыми предложениями, сильно усложняет работу (модель на такое не тренирована, да и в принципе структура языков не всегда позволяет сопоставить части предложения). Хотя может я просто не научился их правильно готовить.</p><p>Лучший результат таким способом – это AI-подсказки, каким может быть следующая фраза. Но даже так, с 80-90% точностью, оставшиеся 10-20% для всей книги – долгая работа, вдобавок иногда взрывающая мозг несоотвествием русского литературного перевода оригиналу. Вот пара примеров (на всю трилогию их тысячи):</p><p><a href="/blog/566935799/1.png"><img src="/blog/566935799/1_small.png" alt></a><br><a href="/blog/566935799/2.png"><img src="/blog/566935799/2_small.png" alt></a><br><em>кричите во всю мочь и палите всё вокруг?</em></p><p>Поэтому тут я вернулся назад к работе с предложениями, чтобы попробовать сопоставить хотя бы их. Разбить текст на предложения – не такая элементарная задача, как может показаться программисту. Можно сильно удивиться, как много в языках нестандартных способов использовать знаки препинания, и как много всего интересного в юникоде. В общем, для токенизации текстов на предложения лучше не морочить себе голову и тоже воспользоваться натренированными моделями. Я брал <a href="https://spacy.io/models/">spaCy</a> – у них есть модели для 25 языках, натренированные на википедии и новостях, в принципе справляются хорошо. На выходе получаются отдельные предложения на русском и английском. Например, для 12-й главы – 503 и 588 предложений.</p><p>Лучшее, что нашлось для сопоставления предложений – <a href="https://github.com/bitextor/hunalign">hunalign</a>. Один из плюсов, что программе можно скормить словарь из соотвествий отдельных слов, чтобы подсказать, что <em>Strider</em> это <em>Бродяжник</em>, а <em>Glorfindel</em> – <em>Всеславур</em>.</p><p>Это сильно проще, чем разбираться, как наложить патч с дообучением или кастомными весами слов, или еще какими-нибудь методами запихнуть эту информацию под несколько слоёв нейронов. Но даже из и без словаря, hunalign строит его для непонятных ей слов сама.</p><p>В принципе, дальше дело техники. Если есть английские сабы с фразами, и пары выровненных предложений, то можно написать скрипт, который заменит фразу этой парой предложений, причём подсветит саму фразу (как в караоке). Это, собственно, то чего я и хотел добиться – видеть целое предложение и фразу внутри него, чтобы иметь возможность разобрать грамматику (иначе к концу уже забываешь начало).</p><p>В этом плане я считаю, что книги для активной работы с языком лучше фильмов, так как содержат больше новых слов и конструкций, а предложения – меньше сокращений, свойственных устной речи (если специально не занимаешься изучением сокращений в устной речи).</p><p><a href="/blog/566935799/snatch.png"><img src="/blog/566935799/snatch_small.png" alt></a><br><em>пример: первая же сцена из Snatch – кто кого keeps?</em></p><p>В книге скорее было бы что-то из этого:<br><em>I give him a hard time to keep him in check</em><br><em>I give him a hard time. It keeps him in check</em></p><p>Последним штрихом – отобразить не только сабы, но и подсветить проговариваемый текст в PDF. Тут тоже немного заковыристо, встроенные в браузер просмотрщики отключили хуки для отображения текста (почему-то это посчитали несекьюрным и Firefox и в Chrome), сторонние читалки тоже не имеют API для динамической работы с текстом (подсветка по таймингам), а парсить PDF на лету – достаточно сомнительное занятие, так как это чисто output-формат. Проще всего предварительно сконвертировать ему в HTML и грузить/подсвечивать уже его.</p><p>Получилось примерно так:<br><a href="https://www.youtube.com/watch?v=reYonqGCU8Q">https://www.youtube.com/watch?v=reYonqGCU8Q</a></p><p>С английским – работает с любой книгой. По идее и с другими парами языков, все используемые нейронки либо мультиязычные, либо имеют модели для двух-трёх десятков языков.</p><p><a href="/blog/566935799/morty.jpg"><img src="/blog/566935799/morty_small.png" alt></a></p><p><a href="https://github.com/spiiin/mp3_srt_pdf_highlight_subtitles">https://github.com/spiiin/mp3_srt_pdf_highlight_subtitles</a></p><p><em>Дальше письмо и говорение</em></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;&lt;a href=&quot;/
      
    
    </summary>
    
    
    
      <category term="longread" scheme="http://spiiin.github.io/tags/longread/"/>
    
      <category term="english" scheme="http://spiiin.github.io/tags/english/"/>
    
  </entry>
  
  <entry>
    <title>Много всего, чего я не знаю</title>
    <link href="http://spiiin.github.io/blog/505778653/"/>
    <id>http://spiiin.github.io/blog/505778653/</id>
    <published>2024-12-16T21:45:03.000Z</published>
    <updated>2024-12-16T21:45:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Технические темы, c которыми я знаком поверхностно, но хотел бы больше.</p><p><code>ui</code> — как общие парадигмы/паттерны/идиомы организации (всякие MVVM/MVU xaml/elmish, RX, способы binding-ов к данным), так и ui/ux приёмы.<br><code>rust</code> — в частности, ownership и его влияние на асинхронный/многопоточный код. Академически скорее.<br><code>vulkan/dx12</code> — попробовать mesh shaders. И просто десяток-другой алгоритмов в todo.<br><code>нижние уровни сетевой модели OSI</code>.<br><code>быстрое прототипирование</code> — правильное использование тулзов, чтобы быстро собирать игровые механики. Разобраться хотя бы, в тулзах проблема или в майндсете. Идеи Bret Victor и Alan Kay.<br><code>программирование звука</code> — чё-то так и не касался серьёзно ни разу.<br><code>интерпретатор lisp</code> — make a list на чём-нибудь.<br><code>ассемблер</code> — вроде и могу читать, но не так хорошо, как хотел бы.<br><code>call/cc</code> — идиомы использования.<br><code>racket</code> — потыкать на предмет кривизны learning curve, сколько усилий нужно вложить, чтобы быстро собирать dsl под задачу на нём.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;Технически
      
    
    </summary>
    
    
    
      <category term="dev" scheme="http://spiiin.github.io/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>Визуальные языки программирования</title>
    <link href="http://spiiin.github.io/blog/3414198781/"/>
    <id>http://spiiin.github.io/blog/3414198781/</id>
    <published>2024-07-04T11:15:42.000Z</published>
    <updated>2024-07-04T11:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Коллекции скриншотов визуальных языков программирования<br><a href="http://blog.interfacevision.com/design/design-visual-progarmming-languages-snapshots/">http://blog.interfacevision.com/design/design-visual-progarmming-languages-snapshots/</a><br><a href="https://docs.google.com/presentation/d/1MD-CgzODFWzdpnYXr8bEgysfDmb8PDV6iCAjH5JIvaI/edit#slide=id.g1e0352b8bc_1_0">https://docs.google.com/presentation/d/1MD-CgzODFWzdpnYXr8bEgysfDmb8PDV6iCAjH5JIvaI/edit#slide=id.g1e0352b8bc_1_0</a></p><p>Две большие категории<br><a href="https://x.com/iamwil/status/1807126903377256474">https://x.com/iamwil/status/1807126903377256474</a></p><h2><span id="dataflow-programming">Dataflow programming</span><a href="#dataflow-programming" class="header-anchor">#</a></h2><p>aka “блюпринты”. Ноды + грани их соединяющие. Традиционные области использования:</p><ul><li>Скриптовые системы в играх (Unreal Blueprints)</li><li>Процедурная генерация текстур/материалов (Blender nodes)</li><li>Синтезаторы музыка (PureData)</li><li>Workflow-менеджменты (IFTTT)</li></ul><p><a href="https://www.tumblr.com/blueprintsfromhell">https://www.tumblr.com/blueprintsfromhell</a><br><a href="https://en.wikipedia.org/wiki/Pure_Data">https://en.wikipedia.org/wiki/Pure_Data</a></p><p>Табличные 2d-редакторы как частный случай dataflow?<br><a href="https://youtu.be/gSFrBFBd7vY?si=oPkR1cmMqFPmW1FW">ORCA - A 2D Visual programming language for creating synth music</a><br><a href="https://www.youtube.com/watch?v=jTG8-WlCMOY">Sassy, the Audio Spreadsheet</a></p><h2><span id="block-based-programming">Block-based programming</span><a href="#block-based-programming" class="header-anchor">#</a></h2><p>aka “структурное редактирование”. Создание управляющих структур из блоков со слотами. Традиционно:</p><ul><li>Обучение программированию (Blocky, Scratch)</li><li>Программирование “умных” игрушек/роботов/конструкторов (MakeCode)</li><li>NoCode бизнес-логика, конфигурации, автоматизация (Codejig)</li><li>Альтернативные подходы к редактированию кода<br>(продвинутый рефакторинг, сохранение синтаксической корректности во время редактирования)</li></ul><p><a href="https://github.com/yairchu/awesome-structure-editors">https://github.com/yairchu/awesome-structure-editors</a><br><a href="https://developers.google.com/blockly/">https://developers.google.com/blockly/</a><br><a href="https://scratch.mit.edu/">https://scratch.mit.edu/</a><br><a href="https://developer.apple.com/swift-playgrounds/">https://developer.apple.com/swift-playgrounds/</a><br><a href="https://youtu.be/jabe532HFXA?si=uw6zXJWR4oaEgqbS&amp;t=569">https://youtu.be/jabe532HFXA?si=uw6zXJWR4oaEgqbS&amp;t=569</a><br><a href="https://makecode.mindstorms.com/">https://makecode.mindstorms.com/</a><br><a href="http://legoengineering.com/alternative-programming-languages/index.html">http://legoengineering.com/alternative-programming-languages/index.html</a><br><a href="https://stencyl.com/">https://stencyl.com/</a> (скорее экзотика в игровом движке)<br><a href="https://github.com/disconcision/fructure">https://github.com/disconcision/fructure</a><br><a href="https://www.youtube.com/watch?v=CnbVCNIh1NA">Andrew Blinn – Fructure: A Structured Editing Engine in Racket</a><br><a href="https://www.youtube.com/watch?v=NQ5h2Ibw6ck">Inline: Efficient Source Code Editing and Manipulation with Code Portals</a></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;Коллекции 
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>daScript AoT</title>
    <link href="http://spiiin.github.io/blog/368621422/"/>
    <id>http://spiiin.github.io/blog/368621422/</id>
    <published>2024-06-06T21:44:37.000Z</published>
    <updated>2024-06-06T21:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><h2><span id="ahead-of-time">Ahead-of-Time</span><a href="#ahead-of-time" class="header-anchor">#</a></h2><p>Пример сборки с поддержкой Ahead-of-Time скриптов.</p><p><strong><code>Сборка tutorial02_dasAot</code></strong></p><p>Программа компилирует скрипты на daScript, но полученное дерево симуляции не выполняет, а отдаёт в <a href="https://github.com/GaijinEntertainment/daScript/blob/master/src/ast/ast_aot_cpp.cpp#L3943">visitor</a>, который генерирует c++-код, строящий аналогичное дерево симуляции (без парсинга, и компиляции). <code>tutorial02_dasAot</code> — пример кастомной утилиты генерации, в которой можно, например, дописать необходимые игре префиксы/постфиксы вроде путей к заголовочным файлам, инициализации или обёртки в неймспейсы. Собранный по умолчанию <code>daScript</code> с ключом <code>-aot</code> также может сгенерировать из das-файла соотвествующий ему c++-файл.</p><p><strong><code>Генерация из скриптов cpp-файлов</code></strong></p><p>Проект <code>tutorial02_dasAotStub</code> — шаг генерации. Вручную может быть вызван как </p><figure class="shiki"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">tutorial02_dasAot.exe -aot tutorial02.das tutorial02_dasAotStub_tutorial02.das.cpp</span></span></code></pre></div></div></figure><p>В настроенном через cmake проекте сгенерированный файл попадает в папку <code>\daScript\examples\tutorial\_aot_generated\tutorial02_dasAotStub_tutorial02.das.cpp</code></p><p><strong><code>Сборка игры с подключенной AoT-версией кода</code></strong></p><p>Следующий шаг — сборки хост-приложения с подключенной к нему AoT-версией кода (<code>tutorial02aot</code>).</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">main</span><span style="color: #E6E6E6">( </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">char</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">*</span><span style="color: #E6E6E6"> [] ) {</span></span><span class="line"><span style="color: #6A9955">    //стандартный код инициализации/компиляция/запуска скриптов daScript</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #9CDCFE">policies</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">aot</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">true</span><span style="color: #E6E6E6">;</span><span style="color: #6A9955"> //политика aot</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> program </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">compileDaScript</span><span style="color: #E6E6E6">(</span><span style="color: #DCDCAA">getDasRoot</span><span style="color: #E6E6E6">() </span><span style="color: #D4D4D4">+</span><span style="color: #E6E6E6"> TUTORIAL_NAME, fAccess, tout, dummyLibGroup, policies);</span></span><span class="line"><span style="color: #E6E6E6">}</span></span></code></pre></div></div></figure><p>При этом к программе прилинкован код файла <code>tutorial02_dasAotStub_tutorial02.das.cpp</code>. По коду в нём можно понять, что будет происходить внутри виртуальной машины daScript:</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//aotLib - таблица заполняется ссылками на &quot;скомпилированное&quot; дерево симуляции функций.</span></span><span class="line"><span style="color: #6A9955">// можно предположить, что в виртуальной машине daScript перед выполнением функции рассчитывается её хеш,</span></span><span class="line"><span style="color: #6A9955">// и если он совпадает, то вызывается Ahead-of-Time версия. В случае изменения хеша -- вызывается новая функция</span></span><span class="line"><span style="color: #6A9955">// (ну или точнее, выбор происходит на стадии построения дерева симуляции программы, </span></span><span class="line"><span style="color: #6A9955">// ссылки на ноды-вызовы функций заменяются на aot-ноды)</span></span><span class="line"><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">registerAotFunctions</span><span style="color: #E6E6E6"> ( </span><span style="color: #4EC9B0">AotLibrary</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">aotLib</span><span style="color: #E6E6E6"> ) {</span></span><span class="line"><span style="color: #6A9955">// test_f5d22a771e42aa43</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #9CDCFE">aotLib</span><span style="color: #E6E6E6">[</span><span style="color: #B5CEA8">0x217a567e6e416cd0</span><span style="color: #E6E6E6">] </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> [</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">](</span><span style="color: #4EC9B0">Context</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">ctx</span><span style="color: #E6E6E6">){</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">ctx</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">code</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #9CDCFE">makeNode</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">SimNode_Aot</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> (*) ( </span><span style="color: #4EC9B0">Context</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">*</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">__context__</span><span style="color: #E6E6E6"> ),</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">test_f5d22a771e42aa43</span><span style="color: #D4D4D4">&gt;&gt;</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #6A9955">// [[ init script ]]</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #9CDCFE">aotLib</span><span style="color: #E6E6E6">[</span><span style="color: #B5CEA8">0xd9e9b0755c21f011</span><span style="color: #E6E6E6">] </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> [</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">](</span><span style="color: #4EC9B0">Context</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">ctx</span><span style="color: #E6E6E6">){</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #9CDCFE">ctx</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">aotInitScript</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">ctx</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">code</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #9CDCFE">makeNode</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">SimNode_Aot</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> (*)(</span><span style="color: #4EC9B0">Context</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">*</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6">),</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">__init_script</span><span style="color: #D4D4D4">&gt;&gt;</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">ctx</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">aotInitScript</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #DCDCAA">resolveTypeInfoAnnotations</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//глобальная переменная -- intrusive list, регистрирующий функции и хранящий ссылки на другие списки инициализации aot-функций</span></span><span class="line"><span style="color: #4EC9B0">AotListBase</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">impl</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">registerAotFunctions</span><span style="color: #E6E6E6">);</span></span></code></pre></div></div></figure><p><strong><code>Проверка</code></strong><br>В скрипт <code>tutorial2.das</code> можно добавить опцию <code>options log_aot=true</code>, чтобы в output проверить, что скрипт использует AoT версию функции<br><figure class="shiki"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">test AOT=0x217a567e6e416cd0  &lt;----- AoT!</span></span><span class="line"><span style="color: #E6E6E6">this tutorial utilizes basic builin module with constant and function</span></span><span class="line"><span style="color: #E6E6E6">sq2 = 1.414213538 // expecting sqrt(2), 1.41421</span></span><span class="line"><span style="color: #E6E6E6">a   = 2   // expecting var a initialized with 2</span></span><span class="line"><span style="color: #E6E6E6">xma = 3.000000000 // expecting 3</span></span></code></pre></div></div></figure></p><p>(можно отключить aot — <code>policies.aot = false;</code>)</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;h2&gt;&lt;span id=
      
    
    </summary>
    
    
    
      <category term="dascript" scheme="http://spiiin.github.io/tags/dascript/"/>
    
  </entry>
  
  <entry>
    <title>Template optimizations</title>
    <link href="http://spiiin.github.io/blog/4074204396/"/>
    <id>http://spiiin.github.io/blog/4074204396/</id>
    <published>2024-06-06T18:17:56.000Z</published>
    <updated>2024-06-06T18:17:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Редкая тема — ускорение compile-time вычислений.</p><p><a href="https://www.youtube.com/watch?v=ZpVPexZHYrQ">code::dive 2017 – Odin Holmes – The fastest template metaprogramming in the West</a> — основные идеи<br><a href="https://www.youtube.com/watch?v=EtU4RDCCsiU">C++Now 2017: Odin Holmes “Type Based Template Metaprogramming is Not Dead”</a> — использование в библиотеках<br><a href="https://www.youtube.com/watch?v=oNBnYhLxlTU">CppCon 2019: Mateusz Pusz “Rethinking the Way We Do Templates in C++”</a><br><a href="https://odinthenerd.blogspot.com/p/index.html">https://odinthenerd.blogspot.com/p/index.html</a> - блог автора, статьи с примерами</p><p><code>Rule of chiel</code>, список операций по времени с точки зрения компилятора:</p><ul><li>дорогое - SFINAE, инстанцирование функции, ~100-500x</li><li>чуть менее дорогое - инстанциирование типа, под капотом у компилятора зовёт аллокацию, ~100x</li><li>среднее - вызов алиаса, ~5x</li><li>добавление параметра типа, ~5x</li><li>добавление параметра в alias вызов, +1x</li><li>повторный поиск уже запомненного созданного типа - 0x</li></ul><p>Основная идея — отделять типы от алгоритмов, чтобы не создавать новые на каждый вызов алгоритма.</p><p>На основе замеров, идиомы:</p><ul><li>alias conditional</li><li>recursive alias</li><li>composition with continuations</li><li>fast tracking</li></ul><p><a href="https://odinthenerd.blogspot.com/2017/03/start-simple-with-conditional-why.html">alias conditional</a></p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">my_if</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">&gt;</span><span style="color: #6A9955"> //`alias template`</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">t</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">my_if</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">true</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">t</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">B</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">result</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> my_if&lt;</span><span style="color: #4EC9B0">B</span><span style="color: #E6E6E6">&gt;::template t</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">T,F</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">;</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//using</span></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">result1</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> my_if&lt;</span><span style="color: #569CD6">true</span><span style="color: #E6E6E6">&gt;::template t</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6">,</span><span style="color: #569CD6">bool</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">result2</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> my_if&lt;</span><span style="color: #569CD6">true</span><span style="color: #E6E6E6">&gt;::template t</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">float</span><span style="color: #E6E6E6">,</span><span style="color: #569CD6">char</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">;</span><span style="color: #6A9955"> //reuse my_if&lt;true&gt;</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">другой быстрый вариант с </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> variable:</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">```cpp</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;</span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">U</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">inline</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> is_same </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">false</span><span style="color: #E6E6E6">;</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">inline</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> is_same</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">T,T</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">true</span><span style="color: #E6E6E6">;</span></span></code></pre></div></div></figure><p><a href="https://odinthenerd.blogspot.com/2017/03/recursive-alias-pattern-why-kvasirmpl.html">recursive alias</a></p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">unsigned</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">loop</span><span style="color: #E6E6E6">;</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">loop</span><span style="color: #E6E6E6">&lt;</span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6">&gt; {</span><span style="color: #6A9955">  //stop</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;template&lt;typename...&gt; </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">f</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">loop</span><span style="color: #E6E6E6">&lt;</span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">&gt; {</span><span style="color: #6A9955">  //keep going</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;template&lt;typename...&gt; </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">U</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6">...</span><span style="color: #4EC9B0">Ts</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">f</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> loop</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">sizeof...</span><span style="color: #E6E6E6">(Ts) </span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6">)</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">::template f</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">F,F</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">T,U</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">,Ts...</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//using</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">I</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">int_</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6"> </span><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> value </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> I;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">U</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">add</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">int_</span><span style="color: #E6E6E6">&lt;(T::</span><span style="color: #4EC9B0">value</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">+</span><span style="color: #E6E6E6"> U::</span><span style="color: #4EC9B0">value</span><span style="color: #E6E6E6">)&gt;;</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">result</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> loop&lt;</span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">&gt;::template f</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">add, int_</span><span style="color: #D4D4D4">&lt;</span><span style="color: #B5CEA8">1</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">, int_</span><span style="color: #D4D4D4">&lt;</span><span style="color: #B5CEA8">3</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">, int_</span><span style="color: #D4D4D4">&lt;</span><span style="color: #B5CEA8">4</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">, int_</span><span style="color: #D4D4D4">&lt;</span><span style="color: #B5CEA8">5</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">, int_</span><span style="color: #D4D4D4">&lt;</span><span style="color: #B5CEA8">6</span><span style="color: #D4D4D4">&gt;&gt;</span><span style="color: #E6E6E6">;</span></span></code></pre></div></div></figure><p>Не создаётся новый тип на каждый шаг алгоритма, переиспользуется уже существующий — разница на 2 порядка. Алгоритм <code>loop&lt;(sizeof...(Ts) &gt; 0)&gt;</code> и тип <code>f&lt;add, int_&lt;1&gt;, int_&lt;3&gt;, int_&lt;4&gt;, int_&lt;5&gt;, int_&lt;6&gt;&gt;;</code> разделены.</p><p><a href="https://odinthenerd.blogspot.com/2017/03/zero-const-composition-with.html">composition with continuations</a></p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//С - continuation</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">C</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">join</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6">...</span><span style="color: #4EC9B0">Ts</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">f</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">join_impl</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">C</span><span style="color: #E6E6E6">, Ts...&gt;;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">C</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">transform</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6">...</span><span style="color: #4EC9B0">Ts</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">f</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">ucall</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">C</span><span style="color: #E6E6E6">, typename F::template f&lt;</span><span style="color: #4EC9B0">Ts</span><span style="color: #E6E6E6">&gt;...&gt;;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//using</span></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">result</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> ucall</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #E6E6E6">    flatten</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #E6E6E6">        filter</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">predicate, </span></span><span class="line"><span style="color: #E6E6E6">            sort</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">less, </span></span><span class="line"><span style="color: #E6E6E6">                remove_adjacent</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6"> is_same,</span></span><span class="line"><span style="color: #E6E6E6">                    fold_left</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">predicate</span><span style="color: #D4D4D4">&gt;&gt;&gt;&gt;&gt;</span><span style="color: #E6E6E6">, </span></span><span class="line"><span style="color: #E6E6E6">    Ts...</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">;</span></span></code></pre></div></div></figure><p>Элементы не собираются/разбираются в списки, а передаются по одному через композицию функций-продолжений (<a href="https://en.wikipedia.org/wiki/Tacit_programming">tacit programming</a>/point free style, pipe) - сильно быстрее + чуть менее вырвиглазный синтакс.</p><p><a href="https://odinthenerd.blogspot.com/2017/03/fast-tracking-why-kvasirmpl-is-faster.html">fast tracking</a></p><p>Кроме терминальной ветки и обработки следующего элемента дописываются ещё несколько веток обработки сразу серии элементов (у автора pow(2) до 256).</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">unsigned</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">next_fold_track</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">unsigned</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">size</span><span style="color: #E6E6E6">){</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> size </span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">10</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">?</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">2</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">:</span><span style="color: #E6E6E6"> size </span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">?</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">:</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">unsigned</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">fold_left_impl</span><span style="color: #E6E6E6">;</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">fold_left_impl</span><span style="color: #E6E6E6">&lt;</span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6">&gt; {</span><span style="color: #6A9955">  //stop</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;template&lt;typename...&gt; </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">f</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">fold_left_impl</span><span style="color: #E6E6E6">&lt;</span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">&gt; {</span><span style="color: #6A9955">  //keep going</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;template&lt;typename...&gt; </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">U</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6">...</span><span style="color: #4EC9B0">Ts</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">f</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> fold_left_impl&lt;</span><span style="color: #4EC9B0">next_fold_track</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">sizeof...</span><span style="color: #E6E6E6">(Ts))&gt;::template f</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #E6E6E6">        F,F</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">T,U</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">,Ts...</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">fold_left_impl</span><span style="color: #E6E6E6">&lt;</span><span style="color: #B5CEA8">2</span><span style="color: #E6E6E6">&gt; {</span><span style="color: #6A9955">  //keep going</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">template</span><span style="color: #E6E6E6">&lt;template&lt;typename...&gt; </span><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T0</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T1</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T2</span><span style="color: #E6E6E6">,</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T3</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T4</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T5</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T6</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T7</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T8</span><span style="color: #E6E6E6">, </span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T9</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T10</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6">...</span><span style="color: #4EC9B0">Ts</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">f</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> fold_left_impl</span><span style="color: #D4D4D4">&lt;</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #DCDCAA">next_fold_track</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">sizeof</span><span style="color: #E6E6E6">...(</span><span style="color: #4EC9B0">Ts</span><span style="color: #E6E6E6">))</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">::template f&lt;F,</span></span><span class="line"><span style="color: #E6E6E6">        F&lt;F&lt;F&lt;F&lt;F&lt;F&lt;F&lt;F&lt;F&lt;F&lt;T0,T1&gt;,T2&gt;,T3&gt;,T4&gt;,T5&gt;,T6&gt;,T7&gt;,T8&gt;,T9&gt;,T10&gt;,Ts...&gt;;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">template&lt;typename F, typename C = identity&gt;</span></span><span class="line"><span style="color: #E6E6E6">struct </span><span style="color: #DCDCAA">fold_left</span><span style="color: #E6E6E6">{</span></span><span class="line"><span style="color: #E6E6E6">    template</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">typename...Ts</span><span style="color: #D4D4D4">&gt;</span></span><span class="line"><span style="color: #E6E6E6">    using f </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> typename C::template f</span><span style="color: #D4D4D4">&lt;</span></span><span class="line"><span style="color: #E6E6E6">        typename fold_left&lt;</span><span style="color: #4EC9B0">next_fold_track</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">sizeof...</span><span style="color: #E6E6E6">(Ts))&gt;::template f</span><span style="color: #D4D4D4">&lt;</span></span><span class="line"><span style="color: #E6E6E6">        F::template f, Ts...</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span></code></pre></div></div></figure><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;Редкая тем
      
    
    </summary>
    
    
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Плюсовики в геймдеве + материалы по геймдеву</title>
    <link href="http://spiiin.github.io/blog/2794788536/"/>
    <id>http://spiiin.github.io/blog/2794788536/</id>
    <published>2024-05-25T20:03:31.000Z</published>
    <updated>2024-05-25T20:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Я давно писал про использование C++ как языка в геймдеве</p><ul><li><a href="/blog/1728194429/" title="С++ в геймдеве">С++ в геймдеве</a></li></ul><p>Тут о людях, которые пишут на С++, банальное, но немного наболевшее и скопившееся, наверное в последний раз на эту тему.</p><div class="toc"><!-- toc --><ul><li><a href="#specializacii-v-geymdeve">Специализации в геймдеве</a></li><li><a href="#problema-plyusovikov-v-geymdeve">Проблема плюсовиков в геймдеве</a></li><li><a href="#trebovanie-k-yazyku-tulzam-dlya-razrabotki-igr">Требование к языку/тулзам для разработки игр</a></li><li><a href="#razvitie-c">Развитие C++</a></li><li><a href="#materialy-po-geymdevu">Материалы по геймдеву</a></li></ul><!-- tocstop --></div><h2><span id="specializacii-v-geymdeve">Специализации в геймдеве</span><a href="#specializacii-v-geymdeve" class="header-anchor">#</a></h2><p>С какого-то доклада я стащил такое разделение программистов по специальностям в AAA-студиях:<br><code>Game - Gameplay/Generalist/AI</code><br><code>Game Tech - AI/Animation/Physics/Render/Network/Generalist/Tools</code><br><code>Core Tech Engine - Animation/Physics/Render/Network/Generalist/Tools</code></p><p>Я бы разделил всю пачку специализаций геймдева просто на <code>рендер/геймплей/технологии</code></p><p><code>Рендер</code><br>Вообще отдельный мир, постоянное изучение пейперов, куча математики, ковыряние с API программирования gpu и с архитектурой железок.</p><ul><li><a href="/blog/245490442/" title="Почему я недолюбливаю программирование графики">Почему я недолюбливаю программирование графики</a></li></ul><p><a href="https://www.elopezr.com/life-and-death-of-a-graphics-programmer/">Life and Death of a Graphics Programmer</a><br><a href="https://c0de517e.com/014_future_engines.htm">The engine of the future.The keynote nobody (quite literally) asked for</a></p><p><code>Геймплей</code><br>Взаимодействие с геймдизайнерами, артистами, продюсерами — изучение особенностей работы смежных дисциплин, быстрый фидбек — результаты своей работы видишь в игре. Бешеный драйв, горящие глаза, сроки, да и сам быстрее выгораешь. Требует быстрых итераций (как вначале, когда нужно прототипировать, искать фановые механики, так в конце при полишинге), и предсказуемости — игры-сервисы требуют регулярного выхода апдейтов.</p><p><code>Технологии</code><br>Не так весело, но зато и не так жгутся сроки. Задачи могут как требовать низкоуровневого кода (движки/компиляторы), так и высокоуровневого (редакторы, ui для артистов). Главный навык чаще всего — эмпатия и понимание образа мысли и действий юзеров. </p><ul><li><a href="/blog/2721099263/" title="Ещё о проектировании (движки и история)">Ещё о проектировании (движки и история)</a> - раздел про эмпатию “Имперсонификация и поиск паттернов вокруг”</li></ul><h2><span id="problema-plyusovikov-v-geymdeve">Проблема плюсовиков в геймдеве</span><a href="#problema-plyusovikov-v-geymdeve" class="header-anchor">#</a></h2><p>В не-топовых командах работают чаще просто <strong><code>&quot;программисты на C++&quot;</code></strong>.</p><p>По С++ много книг, конференций (в том числе на русском), курсов. Наверное, один из главных евангелистов языка на русском - Антон Полухин.</p><p>Из его докладов, где применяется С++ — браузеры/поисковые запросы/языки программирования/кодеки/торренты/игровые движки/космос/самолёты/автомобили/медицинское по/распознавание образов/обработки изображений/web фреймворки/web-страницы/базы данных/proxy/embedded/компиляторы/виртуальные машины/драйверы/биржа/офисные приложения/банкоматы/сапр/рендеры/химия/физика/машинное обучение. Все эти скоупы объединяет то, что в них может потребоваться писать код на низком уровне.</p><p>Тем не менее в каждой из областей есть и другие требования, и применяются также другие языки, которые лучше соответствуют этим требованиям. Например — надёжность (верифицируемость, работа в изолированной среде), простота использования, синтаксическая выразительность, простота работы в многопоточной среде, battery-included (соотвествие стандартной или вендорной библиотеки предметной области), скорость компиляции, скорость итерации разработки (hot-reload, repl, интерпретация). Об этом редко говорят на конференциях и в книгах по С++ (что в принципе и логично).</p><p>В то же время, геймдев, как индустрия, достаточно закрытая, и информации по разработке игр, как и книг и коференций, сильно меньше. Вдобавок, конференции освещают не только техническую сторону разработки, а ещё и представляют из себя шоу (как на уровне больших игр, так и инди), или обсуждение вопросов как лучше зарабатывать, что еще сильнее уменьшает их интересность для технарей. В книгах также редко удаётся передать современные проблемы геймдева по множеству причин — объём предметной области, более узкая специализация и более высокоуровневые темы относительно общих идиом и практик языка, устаревание информации с появлением новых поколений игровых устройств, закрытость информации (как от вендеров платформ, так и от ведущих студий).</p><p>Как результат открытости С++ и закрытости сферы разработки игр, приходящие в геймдев программисты имеют “C++-майндсет” — знают как принято писать на С++ “в общем”, но открывают для себя специфику разработки игр только в процессе работы.</p><p><strong>Способ писать на C++, нахватавшись знаний из разных областей его применения, находится далеко от того, что нужно конкретно для разработки игр</strong>.</p><p>Последствия этого — иногда “плюсовики в геймдеве”, сталкиваясь с какой-то проблемой, начинают решать её таким методом заново, не вникая в то, что наступают на те же грабли, по которым проходили их коллеги в индустрии разработки игр лет так 10-15 назад.</p><ul><li><a href="/blog/2721099263/" title="Ещё о проектировании (движки и история)">Ещё о проектировании (движки и история)</a> — одна из таких проблем, дизайн GameObject-а.<br><a href="https://www.gamearchitect.net/Articles/GameObjectRoundtable.html">The GDC 2003 Game Object Structure Roundtable</a> — как делить игровые объекты между программистами, гейм-дизайнерами и артистами — <em>c++/scripts/visual-programming</em></li></ul><p><em>Иногда и примеры сложно разобрать более детально из-за NDA, но вот ещё несколько примеров дискуссий, касающихся того, что есть в каждой игре, т.е. с дизайном этого сталкиваются все разработчики игр</em></p><p><code>ui</code><br><a href="https://gist.github.com/bkaradzic/853fd21a15542e0ec96f7268150f1b62">Why I think Immediate Mode GUI is way to go for GameDev tools</a> — gui для тулзов и игр, сильно шире, чем в названии. Immediate/Retained/Reactive, Native/Web, Foss/Proprietary </p><ul><li><a href="/blog/3145708234/" title="Push&#x2F;Pull&#x2F;Event model, Reactive GUI">Push&#x2F;Pull&#x2F;Event model, Reactive GUI</a></li></ul><p><code>containers/allocators/pointers</code><br><a href="https://www.jeremyong.com/c++/graphics/2018/11/17/best-practices-for-authoring-generic-data-structures/">Best Practices for Authoring Generic Data Structures</a> — альтернативный дизайн интерфейсов для контейнеров, <a href="https://bitsquid.blogspot.com/2012/11/bitsquid-foundation-library.html">Bitsquid Foundation Library</a>, дальше по обратным ссылкам дискуссии не только о дизайне контейнеров, но и базовых структур стандартной библиотеки, аллокаторах, указателях и сериализации/кодогенерации — <em>class-centric vs data centric design</em> (<a href="https://bitsquid.blogspot.com/2010/02/blob-and-i.html">Blob and I</a>, <a href="https://github.com/SergeyMakeev/Zmeya">Zmeya</a> + ссылки дальше).</p><ul><li><a href="/blog/1366632532/" title="Внутрь STL. Ссылки">Внутрь STL. Ссылки</a> — об альтернативных stl. Одна из фич C, унаследованная C++ — это возможность писать программы без использования стандартной библиотеки.</li></ul><p><code>engines</code><br><strong>Архитектура зависит от формата команды, платформы, развитости технологии, типа игр, и майндсета, поэтому подходы сильно разные</strong><br><a href="https://gamesfromwithin.com/writing-reusable-code">Writing Reusable Code</a> — про паттерны <em>framework/layers/components</em> в игровых движках.<br><a href="https://www.jeremyong.com/game%20engines/2023/09/15/how-i-evaluate-game-engines/">How I Evaluate Game Engines</a> — с точки зрения масштабирования.<br><a href="https://www.youtube.com/watch?v=VglTrU5YmRw">Jonathan Blow on why C++ is a bad language for games</a> — вообщем-то, не C++, а о паттерне layers<br><a href="https://www.youtube.com/watch?v=GK7ntA7a2vk">Your 1st, 2nd, 3rd, and Nth Game Engines</a> — о том, чем плох framework<br><a href="https://geometrian.com/programming/tutorials/write-games-not-engines/">Write Games, Not Engines</a> — инди-подход<br><a href="https://gamearchitect.net/2008/04/15/an-anatomy-of-despair-introduction/">An Anatomy of Despair: Introduction</a> — про выбор между low-level и abstractions (layers)</p><p><code>scripting</code><br><a href="https://enginearchitecture.org/downloads/reac2023_scripting_language.pdf">Scripting language? Engine language?</a> — про границы между движком и игрой<br><a href="https://www.st.cs.uni-saarland.de/edu/seminare/2005/advanced-fp/docs/sweeny.pdf">The Next Mainstream Programming Language: A Game Developer’s Perspective</a> — про баланс производительность/скорость разработки, надёжность, чистоту, многопоточность, развитие железа, ленивые вычисления и системы типов<br><a href="https://www.youtube.com/watch?v=TH9VCN6UkyQ">Ideas about a new programming language for games</a> — Jai<br><a href="https://www.youtube.com/watch?v=IvHGczF6Go0">Продуктивность и производительность в новых скриптовых языках</a> — скриптовый язык для программистов</p><ul><li><a href="/blog/770184585/" title="Скриптовые языки в Unreal Engine">Скриптовые языки в Unreal Engine</a> — про отличия в связывании текстового и визуального языка с движком</li></ul><p><code>ecs</code><br>дискуссии о вариантах ecs/cs и dod с точки зрения архитектуры и производительности<br><a href="https://spiiin.github.io/tags/ecs/">https://spiiin.github.io/tags/ecs/</a> — набор ссылок</p><h2><span id="trebovanie-k-yazyku-tulzam-dlya-razrabotki-igr">Требование к языку/тулзам для разработки игр</span><a href="#trebovanie-k-yazyku-tulzam-dlya-razrabotki-igr" class="header-anchor">#</a></h2><ul><li><a href="/blog/3601773065/" title="Рандомные мысли про код, дизайн, C++ и геймдев">Рандомные мысли про код, дизайн, C++ и геймдев</a> — тут немного про проблематику разработки игр.</li></ul><p>Язык для разработки игр должен быть:<br><code>- быстрый</code> (для определенной части кода)<br><code>- надёжный</code> (компилятор помогает находить проблемы)<br><code>- гибкий</code> (для итераций, прототипов, и тюнинга геймплея — иногда даже немного в ущерб первому требованию, <a href="https://youtu.be/IvHGczF6Go0?si=pWDCbiE2ccms_nP7&amp;t=1395">“Парето-оптимальная производительность”</a>)<br><code>- простой</code> (чем проще описывать предметную область — игровую логику, тем лучше)</p><p>Требования скорости и надёжности более-менее пересекаются с общим направлением развития C++.</p><p>Хотя, кажется, насчёт <code>скорости</code>, полезное свойство языка в декларируемых zero-overhead рантайм-абстракциях, но не в абстракциях для лучшей работы с железом. Большая часть скорости получается даже не от легковесных рантайм-абстракций, а от лучшего соответствия данных и кода особенностям железа, на котором код выполняется, что достигается скорее использованием правильных библиотек, либо специфическим подходом к структурированию данных (Data oriented design).</p><p><img src="/blog/2794788536/desktop_power.png" alt><br><em>картинка из прошлой статьи про C++ в геймдеве, только 3-5% производительности связано с аккуратным использованием языка</em></p><p>Ну и понятно — о скорости можно забыть в debug-билдах<br><a href="https://vittorioromeo.info/index/blog/debug_performance_cpp.html">The sad state of debug performance in c++</a></p><p>Насчёт <code>надёжности</code>, местами сколько не добавляй в язык нового, из-за обратной совместимости необходима скорее дисциплина программистов. Т.е в принципе, надёжность может обеспечиваться дисциплиной в C++ ИЛИ использованием другого языка.</p><p>С <code>гибкостью</code> — тут скорее необходимо брать другой язык, С++ для этого просто непригоден. Но так как о требованиях к гибкости редко говорят в мире C++, иногда бывает и так, что у программистов-плюсовиков просто не возникает ИДЕЙ, о том, что это приводит к ускорению разработки игр и созданию интересного геймплея.</p><blockquote><p>Меняя код запущенной игры, вы ускоряете весь процесс и проходите больше циклов в день, что, в свою очередь, повышает качество вашей игры. Раньше я использовал Scheme, Smalltalk и Python, но в целом подойдут любые языки программирования высокого уровня. Связать все воедино поможет Javascript<br>Jessie Schell, Геймдизайн. Как создать игру, в которую будут играть все.</p></blockquote><p><em>Очень</em> нестандартный набор с точки зрения программиста?</p><p><code>Простота</code> тоже не является чертой C++. Количество нововведений в язык с каждой версией требует обновления знаний к новой версии стандарта.</p><p><em>По разным причинам язык С++ иногда позволяет программисту сказать “I’ve only being doing C++ for 15 years. Can someone explain what is going on here?”</em></p><ul><li><a href="/blog/3121981810/" title="Важность простых языков">Важность простых языков</a></li></ul><p>Один из примеров разрастающейся сложности — решение о разрешении использования в проекте новой версии стандарта языка. С точки зрения программиста плюсовика основным аргументом становится поддержка его компиляторами.</p><p>При этом не всегда заранее учитывается, для каждой отдельной новой фичи:</p><ul><li>насколько будет увеличен размер бинарника при активном использовании фичи</li><li>время компиляции</li><li>насколько хорошо та или иная фича в принципе продумана, и насколько хорошо реализована на уровне компиляторов (“поддерживается” — не значит реализована оптимально)</li><li>дополнительная семантическая/когнитивная нагрузка — насколько в проекте станет больше различных идиом, приёмов, способов сделать что-то.<br>Т.е. “увеличится ли минимальное количество знаний, необходимое для того, чтобы программист игровой логики мог дописать код в произвольном месте” (ну, или в произвольном месте, отведённом для игрового кода). А также, сколько времени будет затрачено от абстрактного общего пула знаний, которые могут потребоваться игровому разработчику (вместо времени на получение дополнительных знаний по C++, он мог бы изучить что-то другое, настолько же или более полезное для разработки игр).</li></ul><p><em>иногда вообще кажется, что проще выучить язык, в котором уже хорошо реализована концепция, вводимая в стандартах C++, и только потом посмотреть, как перевести её на C++, чем изучать её на C++ сразу</em></p><p>При этом с точки зрения функциональности игры в проект скорее всего не будет добавлено ничего.</p><p><em>необходимый дисклеймер</em><br>Эта заметка про программистов, и про их взаимодействие с геймдизайнерами, как <strong>часть</strong> специфики предметной области.</p><p>Есть и другие части, про которые тоже нельзя забывать:<br><code>- Engineering</code> (как <strong>programming integrated over time</strong>) — общие практика разработки. Эта часть более схожа с практиками в других областях разработки программ, хотя тоже имеет свою специфику. Ключевой литературы, посвященной именно геймдеву я не встречал, но тут либо подходит общая литература (только не забывать идиому <strong>take everything with a pinch of salt!</strong>), либо доклады с профильных конференций.<br><code>- Геймдев как бизнес</code> — менее связанно с непосредственно с программированием, но необходимо для представления, что такое профессиональная разработка игр. Материалы (<strong>just a helicopter view on a problem</strong>):<br>   <strong><code>Алексей Савченко - Игра как бизнес. От мечты до релиза</code></strong> — разбор процесса создания игры, в основном про премиум-игры AA-класса. С начала и до конца. Из относительных недостатков — высокий входной порог для понимания, не всегда легко отделить написанные кровью правила от личного опыта, мало ссылок (“изучите пайплайн производства арта у Disney”)<br>   <strong><code>Development and Deployment of Multiplayer Online Games: from social games to MMOFPS, with stock exchanges in between</code></strong> — MMO и сервисные игры. Не закончена. Много технической информации, немного про оперирование.<br>   <strong><code>Lovell Nicholas - The Pyramid of Game Design. Designing, Producing and Launching Service Games</code></strong> — Free-to-play игры, геймдизайн и бизнес-модель.<br>   <strong><code>Jessie Schell - серия докладов про игровые студии</code></strong> — <a href="https://www.youtube.com/watch?v=y92-vkyHKbY">Information Flow: The Secret to Studio Structure</a>, <a href="https://www.youtube.com/watch?v=O1zP6yJjc1o">Game Studio Leadership: You Can Do It</a>, <a href="https://www.youtube.com/watch?v=-zRaFJHK0S4">Game Studio Management: Making It Great</a></p><h2><span id="razvitie-c">Развитие C++</span><a href="#razvitie-c" class="header-anchor">#</a></h2><p>Куда двигался и двигается С++? (субъективно, не пересказ Committee’s subgroups)<br><code>- Борьба с наследием C и раннего C++</code> — спрятать сырые указатели, убрать касты (больше способов передать компилятору информацию о связях типов), заменить метапрограммирование by accident на by design (меньше трюков с шаблонами), добавить больше возможностей говорить о корректности части программы. <a href="https://youtu.be/x7fxeNqSK2k?si=egaG1Vew66GVtjoT&amp;t=308">Sean Baxter @Bloomberg: Circle Fixes Defects, Makes C++ Language Safer &amp; More Productive</a> — C++ “bad defaults”. Ориентиры — Rust/D/Possible future C++ successor<br><code>- Синтаксический сахар</code> — добавления лямбд, deducing this, &lt;=&gt;, fold expressions, CTAD и прочее, сокращающее количество символов. Получается местами так себе (отчасти также из-за наследия <a href="https://www.youtube.com/watch?v=tsG95Y-C14k">CppCon 2018: Timur Doumler “Can I has grammar?”</a>, <a href="https://brevzin.github.io/c++/2020/06/18/lambda-lambda-lambda/">Lambda Lambda Lambda</a>, отчасти из-за того, что не любую синтаксическую “сладость” можно завернуть в zero-runtime overhead обёртку, в качестве примера можно пронаблюдать дискуссии про стандартизацию coroutines). Ориентиры — Python/Ruby.<br><code>- Возможности выразительности типов/функций</code> — концепты, ranges, функциональные возможности, вычисления над типами. Последователи Alexandresku и Stepanov — Sean Parrent, Odin Holmes, Louis Dionne/Ivan Cukic, Bartosz Milewski. <a href="https://www.youtube.com/watch?v=eRFKCsysOqk">CppChat The Great Template Metaprogramming Library Debate</a> — иногда выглядит, что каждый тянет в свою сторону, как, собственно, должно выглядеть метапрограммирование на C++. Ориентиры — ML/Haskell/Lisp - очень разные идеи<br><code>- Рефлексия/Compile-time evaluations</code> — в принципе, то же, что и с предыдущим пунктом. <a href="https://www.youtube.com/watch?v=PJwd4JLYJJY">Ben Deane &amp; Jason Turner “constexpr ALL the Things!”</a> / <a href="https://www.youtube.com/watch?v=NNU6cbG96M4">Don’t constexpr All the Things - David Sankel</a> / <a href="https://www.youtube.com/watch?v=NWIsRFDaHhs">Reflection in C++ Next - Anton Bikineev</a>. Ориентиры — D?. Хотя хотелось бы что-нибудь типа Haxe/Nemerle/Nim/Lisp/Smalltalk, или хотя бы Circle/LLVM.<br><code>- Расширение std</code> — Hazzard pointers, примитивы синхронизации, parallel stl, filesystem/networking/threading. Сложно, из-за большого scope С++ — из-за необходимости поиска “наименьшего общего знаменателя” могут не приниматься доступные <em>почти</em> на любом современном железе/операционной системе вещи. <a href="https://www.youtube.com/watch?v=g2iyNH2Gh1k">C++ Siberia 2019: Антон Полухин, C++ на практике</a> — особенно интересная дискуссия в конце. Ориентиры — Java/C#.<br><code>- Game/Embedded/Low Latency</code> — я не особо знаю идеи, пришедшие в стандарт оттуда, только общие мысли. Идеи альтернативной EASTL. DOD — <a href="https://www.youtube.com/watch?v=yy8jQgmhbAU">CppCon 2018: Stoyan Nikolov “OOP Is Dead, Long Live Data-oriented Design”</a> и <a href="https://www.youtube.com/watch?v=92KFSD3ObrY">CppCon 2014 Mike Acton Data Oriented Design and C++</a>. Low latency — <a href="https://www.youtube.com/watch?v=EzmNeAhWqVs">What is Low Latency C++? - Timur Doumler - CppNow 2023</a></p><p>Уже не совсем язык, но:<br><code>- Tooling</code> — статический анализ, fuzzing, sanitazers, flamegraphs. Наверное, ещё LLVM с его API к компилятору. <a href="https://www.youtube.com/watch?v=tISy7EJQPzI">CppCon 2017: Titus Winters “C++ as a “Live at Head” Language”</a></p><p>В общем, хотя сам язык подходит для разработки игр, но развитие направлено <em>не совсем</em> в сторону упрощения решения проблем разработки игр. И не надо пытаться использовать для разработки игр только его.</p><h2><span id="materialy-po-geymdevu">Материалы по геймдеву</span><a href="#materialy-po-geymdevu" class="header-anchor">#</a></h2><p><em>пока просто свалены в одну кучу</em></p><p><code>~meta</code><br><a href="https://www.gamedevs.org/">Gamedevs.org</a> — список презентаций и документов на различные темы в геймдеве. Почти все полезные.<br><a href="https://github.com/miloyip/game-programmer">A study path for game programmer</a> — бесконечный список книг, местами для общего образования, а не необходимых каждому.<br><a href="https://www.gdcvault.com/">GDC Vault</a> — огромный архив конференции, часть информации платная</p><p><code>~engines</code><br><a href="https://github.com/redorav/public_source_engines">Game Engines with Source: Learning from the best</a> — список движков с исходниками. Как решаются возникающие в геймдеве проблемы в существующих движках. В отличие от других коллекций, здесь не все движки, которые удалось найти, а выборка приличного качества.<br>Блоги про разработку движков, старые, но не устаревшие. Часто содержат описание проблем и возможного пространства решений.<br><a href="https://bitsquid.blogspot.com/">Bitsquid</a> — bitsquid/stingray<br><a href="https://ruby0x1.github.io/machinery_blog_archive/">Our Machinery</a><br><a href="https://blog.molecular-matters.com/">Molecular Matters</a><br><a href="http://gameangst.com/">Despair</a> + <a href="https://gamearchitect.net/category/despair-engine/">GameArchitect</a><br><a href="https://solid-angle.blogspot.com/">https://solid-angle.blogspot.com/</a><br><a href="https://diligentgraphics.com/">https://diligentgraphics.com/</a><br><a href="https://www.3dgep.com/">https://www.3dgep.com/</a> / render<br><a href="https://engine-programming.github.io/">https://engine-programming.github.io/</a></p><p><code>~solodev</code><br><a href="https://floooh.github.io/">https://floooh.github.io/</a><br><a href="https://gist.github.com/bkaradzic">https://gist.github.com/bkaradzic</a> (bgfx)<br><a href="https://www.gingerbill.org/article/">https://www.gingerbill.org/article/</a> (odin)<br><a href="https://zylinski.se/">https://zylinski.se/</a><br>jonathan blow, <a href="http://number-none.com/product/">http://number-none.com/product/</a> + разное<br><a href="https://gamesfromwithin.com/category/game-tech">https://gamesfromwithin.com/category/game-tech</a></p><p><code>~general</code><br><a href="https://aras-p.info/blog/">https://aras-p.info/blog/</a> - Aras Pranckevičius, Unity<br><a href="https://randygaul.github.io/">https://randygaul.github.io/</a><br><a href="https://probablydance.com/">https://probablydance.com/</a><br><a href="https://gafferongames.com/">https://gafferongames.com/</a><br><a href="https://journal.stuffwithstuff.com/">https://journal.stuffwithstuff.com/</a><br><a href="https://www.tomlooman.com/">https://www.tomlooman.com/</a> - unreal<br><a href="https://bronsonzgeb.com/">https://bronsonzgeb.com/</a><br><a href="https://box2d.org/posts/">https://box2d.org/posts/</a><br><a href="https://skypjack.github.io/">https://skypjack.github.io/</a><br><a href="https://etodd.io/">https://etodd.io/</a><br><a href="https://allenchou.net/blog/">https://allenchou.net/blog/</a><br><a href="https://jobtalle.com/index.html">https://jobtalle.com/index.html</a><br><a href="https://deepnight.net/tutorials/">https://deepnight.net/tutorials/</a><br><a href="https://caseymuratori.com/contents">https://caseymuratori.com/contents</a><br><a href="https://dyn4j.org/tags#game-development">https://dyn4j.org/tags#game-development</a><br><a href="https://www.jeremyong.com/">https://www.jeremyong.com/</a> - game dev general/graphics<br><a href="https://stoyannk.wordpress.com/">https://stoyannk.wordpress.com/</a><br><a href="https://deplinenoise.wordpress.com/">https://deplinenoise.wordpress.com/</a><br><a href="https://blog.demofox.org/">https://blog.demofox.org/</a><br><a href="https://github.com/BobbyAnguelov/Esoterica">https://github.com/BobbyAnguelov/Esoterica</a> - эксперименты Bobby Anguelov с системами анимации/ии.<br>mike acton<br>кармак</p><p><code>~render (немного)</code><br>Real-time rendering + ссылки оттуда на статьи/блоги/доклады<br><a href="https://diaryofagraphicsprogrammer.blogspot.com/">https://diaryofagraphicsprogrammer.blogspot.com/</a> - Wolfgang Angel, The Forge, пачка книг ShaderX/GPU Pro/GPU Zen<br><a href="https://zeux.io/">https://zeux.io/</a> - Arseny Kapoulkine, Roblox<br><a href="https://mynameismjp.wordpress.com/">https://mynameismjp.wordpress.com/</a> - Matt Pettineo, Sony<br><a href="https://fgiesen.wordpress.com/">https://fgiesen.wordpress.com/</a> - Fabian “ryg” Giesen, RAD game tools<br><a href="https://realtimecollisiondetection.net/blog/">https://realtimecollisiondetection.net/blog/</a> Christer Ericson, Activision<br><a href="http://c0de517e.blogspot.com/">http://c0de517e.blogspot.com/</a> - Angelo Peske, Roblox<br><a href="http://eelpi.gotdns.org/">http://eelpi.gotdns.org/</a> - Tom Forsyth, Valve<br><a href="https://interplayoflight.wordpress.com/">https://interplayoflight.wordpress.com/</a> - Kostas Anagnostou, Playground Games</p><p><a href="https://x.com/SebAaltonen">https://x.com/SebAaltonen</a> - Sebastian Aaltonen, Unity, Ubisoft, mobile render in hype-hype<br><a href="https://x.com/mirror2mask">https://x.com/mirror2mask</a> - Natalya Tatarchuk, Activision, Unity</p><ul><li><a href="/blog/2701222076/" title="Gamedev-ссылки">Gamedev-ссылки</a> — просто пачка разрозненных ссылок</li></ul><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;Я давно пи
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
      <category term="gamedev" scheme="http://spiiin.github.io/tags/gamedev/"/>
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
      <category term="longread" scheme="http://spiiin.github.io/tags/longread/"/>
    
  </entry>
  
  <entry>
    <title>Ctrl+N программисты</title>
    <link href="http://spiiin.github.io/blog/2055328082/"/>
    <id>http://spiiin.github.io/blog/2055328082/</id>
    <published>2024-05-25T10:24:26.000Z</published>
    <updated>2024-05-25T10:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p><a href="https://pigmeich.livejournal.com/3294.html">Ctrl+C, Ctrl+X и Ctrl+Arrow программисты</a> — древнее полушуточное деление программистов по клавише, которую они чаще всего нажимают.</p><p>Я в этой схеме Ctrl+X программист.</p><ul><li>после Ctrl+X иногда можно не нажимать Ctrl+V. Код надо активно удалять, разросшаяся кодовая база — это самое страшное, что может случиться с проектом.</li><li>философия Ctrl+X наивно предполагает, что существующий код в хорошем состоянии. Каждое небольшое изменение, начиная с первого коммита в репозиторий делает его немного лучше. Не переиспользовать готовый хороший код — плохо. Даже если готовый код плохой, чтош, приходится переиспользовать плохой код. При таком подходе не годится только код, который вообще нельзя переиспользовать, его можно только выбросить и написать новый, который делает то же, но лучше подходит для переиспользования.</li><li>в большой кодовой базе редко возникает ситуация, когда новая задача требует абсолютно нового кода.</li><li>если необходимо заменить целую подсистему, возможно делать это инкрементально, а не большим куском (<a href="https://learn.microsoft.com/en-us/azure/architecture/patterns/strangler-fig">Strangler Fig pattern</a>).</li></ul><p><img src="/blog/2055328082/strangler_fig_small.png" alt><br><a href="https://en.wikipedia.org/wiki/Strangler_fig">Strangles fig</a> — тотемное дерево Ctrl-X программистов, в Тайланде много таких. Маленькие ростки сверхну вниз постепенно создают отдельные новые пути, замещая старое дерево</p><ul><li><a href="/blog/1257365288/" title="Хорошие качества программистов">Хорошие качества программистов</a> — умение решать задачу минимальным количеством изменений в коде</li></ul><h2><span id="ctrl-n-programmisty">Ctrl+N программисты</span><a href="#ctrl-n-programmisty" class="header-anchor">#</a></h2><p>Недавно я понял, что знаю ещё один тип программистов. Их любимое сочетание клавиш — Ctrl+N. Создать новый файл и начать писать туда код. Много кода. Типа <a href="https://x.com/Nekrolm/status/1792823888600314266">такого</a>, 10к строк, насколько PR их не дели, остаются 10к строк за раз. “Там на 70% всё правильно” (это кажется одновременно и шутка, и серьёзная оценка). В хороших случаях — половина кода тесты. Но про этим, если верить эвристике, что число ошибок на 1к строк кода постоянно, то в тестах тоже будет несколько ошибок. Да и тесты — это не способ проверить сам добавляемый <strong>сейчас</strong> код, и тем более не способ проверить интеграцию этого кода в общую базу, они для проверки добавляемого кода к будущем его изменениям.</p><p>“Почему коллеги не захотели отревьюить мой код, у них был шанс, теперь придётся мерджить так” — реалистичный лимит на ревью - 100-500 строк, а в идеале 20-100 строк. Всё что больше просто монолит, гарантированно содержащий несколько ошибок, с большим количеством информации о коде в голове автора. Либо брать целиком как есть, либо выбрасывать целиком. Я встречал кейс, когда автор прочитал 1.5 часовую лекцию с обещанием потом записать всё в вики. Конспект и детальное расписывание примеров в этом случае займёт дополнительно часов 5 (в ходе написания документации обнаружатся пробелы в памяти автора и скорее всего ошибки в коде).</p><p>При интеграции возникает проблема <a href="https://ru.wikipedia.org/wiki/%D0%90%D1%85%D0%B8%D0%BB%D0%BB%D0%B5%D1%81_%D0%B8_%D1%87%D0%B5%D1%80%D0%B5%D0%BF%D0%B0%D1%85%D0%B0">Ахиллеса и черепахи</a>, пока программист делает свою часть работы, проект уходит немного вперёд (или оказывается, что автор забыл, что его изменения требуют ещё каких-то дополнительных изменений в проекте или в коде автора), что требует дополнительных правок, за время которых проект уходит ещё немного вперёд.</p><p>Из хороших качеств Ctrl-N программистов — это умные и энергичные люди, способные быстро писать большое количество кода и держать в голове его структуру (пока не забудут). В хорошем случае, тратят больше времени на планирование на бумаге и тесты.</p><h2><span id="slozhnost-predmetnoy-oblasti">Сложность предметной области</span><a href="#slozhnost-predmetnoy-oblasti" class="header-anchor">#</a></h2><p>Иногда большой объём кода, который любят писать Ctrl+N программисты является отражением сложности предметной области. Например, для создания/рефакторинга библиотеки gui программисту потребовалось переписать разом 50 контролов, или при создании DSL — несколько десятков конструкций для своего доменного языка. Варианты решений, которые могут немного исправить такие ситуации — кодогенерация (кодогенератор десяти тысяч строк вполне может уложиться в 500 строк), или использование другого языка, который уже решает часть проблем.</p><p>Например каждая конструкция доменного языка скорее всего потребует описания не только своей структуры, а и нескольких действий на основе этой структуры:<br><strong><code>- верификации</code></strong> (валиден ли сгенерированный пользователем код?)<br><strong><code>- выполнения</code></strong> (как именно выполнять описанные пользователем dsl действия),<br><strong><code>- преобразований</code></strong> (может ли мы улучшить описанную пользователем структуру вместо выполнения)<br><strong><code>- хранения</code></strong> (как сохранить/восстановить структуру при перезапуске программы-хоста, включая версионирование при изменениях в самом DSL)<br><strong><code>- представления</code></strong> (как отображать dsl, визуальное представление для редактирования или отладки)<br>Эти действия в разных языкам могут быть выражены как тривиально, так и требовать ручной работы. Один из вариантов решения — не описывать это руками, а воспользоваться функционалом другого языка (с виртуальной машиной или другим способом встроить его в основной), который уже решает часть или все задачи. Тогда реализуемый dsl вместо описания того как выполнять каждое из этих действий превратится в описание того, как отобразить описание структур на исходном языке в описание для виртуальной машины (и, возможно, обратно).</p><h2><span id="ctrl-s-programmisty">Ctrl+S программисты</span><a href="#ctrl-s-programmisty" class="header-anchor">#</a></h2><p>Ходят легенды также о мифических Ctrl-S программистах, которые чаще всего сохраняют код, и благодаря hot-reload изучают результат в запущенном приложении.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
    
      <category term="fun" scheme="http://spiiin.github.io/tags/fun/"/>
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
      <category term="dev" scheme="http://spiiin.github.io/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>Виды сложности</title>
    <link href="http://spiiin.github.io/blog/4080907009/"/>
    <id>http://spiiin.github.io/blog/4080907009/</id>
    <published>2024-05-24T23:07:00.000Z</published>
    <updated>2024-05-24T23:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p><strong><code>- Сложность предметной области</code></strong><br>Поиск “серебрянной пули” — универсального подхода к проектированию чего угодно. Например, проектировать, исходя из того, что “всё есть объекты”, “используем шаблоны проектирования”, попытка натягивать на паттерны всё, даже там, где это не нужно. Или “запретить использование сырых указателей”. Иногда получается хорошо, иногда странно.  Идея с классами в геймдеве рождает GodObject (GameObject/GameLevel) + в конечных классах получаются очень неудобные иерархии наследования.</p><p>Другой подход — разработка фреймворков/DSL, с помощью которых можно смоделировать на высоком уровне (“на языке специалистов предметной области”) большую часть задач в какой-либо отрасли. Может размазываться в различных пропорциях между “системным языков” и “прикладным языком/программой”, со слоем склеивания в виде файлов с данными или API в коде.</p><ul><li><a href="/blog/2721099263/" title="Ещё о проектировании (движки и история)">Ещё о проектировании (движки и история)</a></li></ul><p>Сложность предметной области плохо устраняется, так как описывает не красивые абстрактные модели, а конкретные частные случаи. Важно не подмешать лишней сложности, напроектировав в голове машины Руба Голдберга. Меньше понятий, сущностей, уровней абстракции и связей. Если без чего-то можно обойтись — нужно это выбросить.</p><p><a href="https://caseymuratori.com/blog_0015">Semantic compression</a> — статья о том, как выбрасывать сущности.</p><p><strong><code>- Сложность выполнения требований</code></strong></p><p><em>“Выбросить клоунов из машины”</em></p><p>Программы выполняются не на абстрактном компьютере, а на реальном железе. Существует разрыв между задачами, которым с головой хватает возможностей компьютера, и теми, которые упираются в ограничения. Кроме железа, могут вылезать и другие сложности окружения  — сборщик мусора, ограничения файловой системы или сети, с какого-то масштаба задач требуют учёта влияния этих факторов. “Common wisdom” про то, что можно начинать оптимизировать с момента, когда начнёт тормозить, работает далеко не всегда. Иногда решения по оптимизации должны быть заложены еще на уровне дизайна.</p><p>Отдельная сложность — предсказание ограничений, которые возникнут, но неизвестны заранее. С геймдевом — в индустрии не так много накопленного и обработанного опыта развития игр после выпуска по 5-10 и более лет.</p><p><strong><code>- Сложность старта</code></strong></p><p>Gui приложения, пустое окно OpenGL, настройка и разворачивание веб-сервера для странички — лет 15 назад требовали больше работы, чем сейчас. Более-менее решено с помощью open-source библиотек, бесплатного хостинга, доступного интернета, искусственного интеллекта. Если не поднимать вопрос о качестве этих библиотек (в разных отраслях разное), то можно сказать что стартовать и собирать прототипы стало сильно проще. Менее заметно в больших командах, чем при одиночной разработке.</p><p><a href="https://zylinski.se/posts/solodevs-and-the-trap-of-the-game-engine/">Solodevs and the trap of the game engine</a> — про разницу разработки игр в одиночку и в больших командах</p><p><strong><code>- Сложность роста</code></strong></p><p>Серьёзная проблема, с частичными идеями решения. Некоторые практики могут работать для программ на 10к-100к строк, написанных 5 людьми, но ломаться после 100к строк, написанных в разное время 50 людьми. Один из приёмов — изолировать сложность на каком-то уровне, и выдать “наружу” зафиксированный интерфейс. Чем более отдельный компонент получается, тем проще с ним общаться извне, без риска поломки. Вариант изоляции более высокого уровня — виртуальные машины и сэндбоксы для приложений.</p><p>Второй подход — не изолировать сложность, а искать такие методы решения, которые позволяют избегать роста сложности (“сделать так, чтобы большая программа ощущалась как маленькая”). Отбросить принятые практики, ведущие к запутыванию, встроить что-то в “простой” язык/виртуальную машину (пожертвовав чем-то). Преимущество таких решений — надёжность, за счёт гарантий (даже если частичных) от компилятора. Чем проще система, тем больше шансов, что в ней будет возможно быстрое внесение изменений/добавлений функционала/исправление ошибок. Single responsibility из SOLID или KISS — кодифицированные отсылки к такому подходу, как и <a href="https://www.youtube.com/watch?v=LKtk3HCgTa8">Simplicity</a> Рича Хики</p><p><strong>update 2024-09-23</strong><br><a href="https://mbuffett.com/posts/all-tacit-knowledge/">Programming and Tacit Knowledge</a> - tacit-знания, которые невозможно передать через туториал, а только эмпирически.<br>Примеры в программировании — архитектура/дизайн/паттерны/парадигмы программирования. Навыки отладки, организации рабочего процесса, оценка стиля кода, контроль сложности, производительности и запутанности кода.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;&lt;strong&gt;&lt;c
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
  </entry>
  
  <entry>
    <title>Game Engines with Source: Learning from the best</title>
    <link href="http://spiiin.github.io/blog/3139044644/"/>
    <id>http://spiiin.github.io/blog/3139044644/</id>
    <published>2024-05-22T22:32:26.000Z</published>
    <updated>2024-05-22T22:32:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p><a href="https://github.com/redorav/public_source_engines">https://github.com/redorav/public_source_engines</a> — список исходников движков</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
    
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>Рандомные мысли про код, дизайн, C++ и геймдев</title>
    <link href="http://spiiin.github.io/blog/3601773065/"/>
    <id>http://spiiin.github.io/blog/3601773065/</id>
    <published>2024-05-20T17:32:38.000Z</published>
    <updated>2024-05-20T17:32:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><ul><li><a href="/blog/1728194429/" title="С++ в геймдеве">С++ в геймдеве</a> — предыдущий пост на похожую тему</li></ul><p>Несколько общих статей от разработчиков игр:<br>[1] - <a href="https://loglog.games/blog/leaving-rust-gamedev/">Leaving Rust gamedev after 3 years</a> — про то, что фичи Rust-а не особо помогают для геймдева, а периодически и мешают.<br>[2] - <a href="https://www.elopezr.com/life-and-death-of-a-graphics-programmer/">Life and Death of a Graphics Programmer</a> — взгляд на геймдев со стороны графического разработчика. Достаточно высокий, чтобы быть интересным любому разработчику игр.</p><p>Важные моменты из статей:</p><blockquote><p>Generalized systems don’t lead to fun gameplay</p></blockquote><p>Программирование геймплея практически невозможно уложить в обобщенную систему или библиотеку на С++/Rust (как и иерархию классов), нужны другие строительные блоки.</p><blockquote><p>Making a fun &amp; interesting games is about rapid prototyping and iteration, Rust’s values are everything but that</p></blockquote><p>Строгие требования языка мешают прототипированию. Геймдев — не про выражение строгих требований, а про простые эксперименты и быстрые итерации.</p><blockquote><p>Rust gamedev ecosystem lives on hype</p></blockquote><p>Больше даже не про Rust, а про open-source библиотеки в принципе. Большая часть из них не готова к использованию в продакшене. Код в продакшене сильно сложнее за счёт того, что в нём заложено решения множества возникавших проблем.</p><blockquote><p>Упорная борьба с компилятором за то, чтобы заставить его сделать что-то конкретное, даёт чувство достижения. В одной кодовой базе была мощная функция рефлексии шейдеров с множеством метахакерских шаблонов и макросов, которая работала, если оставить ее в покое, но ее было невероятно сложно отлаживать, изменять и расширять. Оглядываясь назад, можно сказать, что такая альтернатива, как генерация кода, могла бы работать лучше.</p></blockquote><p>Касается и других систем рефлексии.</p><blockquote><p>Как графический программист я добавлял бесконечное количество чекбоксов, слайдеров и кнопок для множества редакторов объектов. И намного более важно в этом, чтобы элемент был добавлен в корректную категорию, имел правильные ограничения на ввод и понятные подсказки, что то, как выглядит код, это абсолютно неинтересно и неважно артисту.</p></blockquote><p>Как и с любыми тулзами. Невозмжно, что под капотом, важно что тот, как работает с программой (фактически, ДЕЛАЕТ игру) имел то, что удобно для него. Программисты типично пытаются делать тулзы для себя, а не для других. Один из симптомов такого перекоса — желание выбрать/создать скриптовый язык, похожий на C++.</p><h2><span id="proektirovanie-pod-komandu">Проектирование под команду</span><a href="#proektirovanie-pod-komandu" class="header-anchor">#</a></h2><p>Проектирование (в частности, выбор языка и инфраструктуры) в геймдеве сильно зависит состава команды. В [2] есть сравнение команд, в которых шейдеры могут трогать только программисты с теми, в которых к ним есть доступ у технических артистов, и просто артистов. Если в Doom шейдеры модифицируют только программисты, то в нём и будет около 100 типов шейдеров (и не будет серьёзного инструмента для работы с ними), тогда как в Unreal вышедшие проекты могут содержать до 10к материалов, но и тулзы, в которых делаются шейдеры, будет выглядеть сильно по разному.</p><p><strong>Если игру делают программисты, и хотят сделать редактор, важно понимать для кого они делают редактор — для себя или будущих гейм-дизайнеров, со старта.</strong></p><ul><li><a href="/blog/2721099263/" title="Ещё о проектировании (движки и история)">Ещё о проектировании (движки и история)</a> — одна из больших идей этой статьи, что проектирование (не только тулзов, но и архитектуры) изначально должно учитывать конфигурацию команды.</li></ul><h2><span id="geymdev-problematika">Геймдев проблематика</span><a href="#geymdev-problematika" class="header-anchor">#</a></h2><p>Программисты сталкиваются в первую очередь с техническими требованиями к игре — код должен быть быстрым и надёжным (больше ошибок ловит ловит компилятор). Но кроме этих требований у гейм-дизайнеров, создающих игровые механики, есть другие.</p><p><a href="https://www.youtube.com/watch?v=o5K0uqhxgsE">This Problem Changes Your Perspective On Game Dev</a> — обзор процесса поиска в дизайне. Критична простота экспериментов, и скорость итерации. В видео нет никаких новых идей — это стандартные требования геймдизайнеров к инструментам, чтобы иметь возможность создавать интересный геймплей. Причём не только к инди или инновационным играм, а вообще к играм любого жанра.</p><p><a href="https://www.youtube.com/watch?v=72y2EC5fkcE">Tomorrow Corporation Tech Demo</a> — небольшой пример хот-релоада<br><a href="https://www.youtube.com/watch?v=PUv66718DII">Inventing on Principle</a> — еще пример<br><a href="https://youtu.be/-zc8LcDwVUc?si=1RkL-OX3RNfc6gk_&amp;t=132">NimForUE 101: uStructs</a> — перезагрузка в vm unreal с помощью кода на nim<br><a href="https://www.youtube.com/watch?v=inGb9R1NowY">Live Stream Coding on daScript - Breakoid</a> — Arcanoid на daScript с нуля без перезапуска игры</p><ul><li><a href="/blog/3309518526/" title="Системы поиска сокровищ">Системы поиска сокровищ</a> — системы поиска сокровищ в песочницах</li></ul><p>В общем, необходимо:<br><code>- возможность очень быстро проверить изменения</code> — быстрая сборка, в том числе с возможностью хот-релоада<br><code>- простая интроспекция</code> — в том числе визуальная, через редакторы и дополнительный gui<br><code>- возможность комбинировать объекты</code>. Особенность геймдева — наличие большого числа объектов, которые могут изменять поведение динамически (ECS подход об этом)</p><p>C++ как язык местами не помогает, а скорее мешает реализации систем, которые бы имели такие свойства.</p><p>Дополнительно, так как геймдев требователен к производительности:<br><code>- возможность оптимизации быстро написанного кода</code> — Just-in-Time, Ahead-of-Time</p><h2><span id="pro-volny-razvitiya-tehnologiy">Про волны развития технологий</span><a href="#pro-volny-razvitiya-tehnologiy" class="header-anchor">#</a></h2><p>C++ находится на достаточно поздней стадии развития — много лет использования, развитые компиляторы с оптимизациями, стандартная библиотека. Периодически предлагаются языки-наследники (Carbon, Cpp2, Val). Но при этом он плохо подходит для решения специфичный для современного геймдизайна проблем, перечисленных выше.</p><p><code>- долгая компиляция</code>. Заменить include на модули стоило бы лет 15 назад. Тем не менее, модули все ещё не используются.<br><code>- рефлексия в стадии &quot;обсуждаем, как стандартизовать&quot;</code>. Из-за особенностей C++ можно ждать возможности использовать то что настандартизируют ещё очень долго. Причём только рефлексию, без кодогенерации и полноценного compile-time выполнения, которые тоже нужны. Лучшее решение сейчас — внешний инструмент.<br><code>- менять код на лету можно очень ограниченно</code>. Интерпретации не планируется, hot-reload на уровне подмены динамической библиотеки (доступной не на всех платформах). Требуется внешнее решение.</p><p><em>Вообще ждать появления чего-то в стандарте — очень ненадёжно. Может быть отложено, принято криво, после принятия еще несколько лет до исправления багов во всех реализацией, и еще — на обновление библиотек</em></p><p>Как сделать разработку легче? </p><p><strong>Не пытаться использовать C++ там, где это неудобно, использовать другой язык или языки для описания игровой логики</strong>. Такой на котором проще решать проблемы гейм-дизайнеров, не программистов (этот язык даже скорее всего будет <em>менее</em> удобен программистам, во всяком случае вначале).</p><p><img src="/blog/3601773065/lobster_pre_small.png" alt><br><em>старая архитектура, много c++, немного в скриптах</em></p><p><img src="/blog/3601773065/lobster_small.png" alt><br><em>новый подход, что-то типа <a href="https://enginearchitecture.org/downloads/reac2023_scripting_language.pdf">такого</a> (доклад сам по себе про похожие идеи). автор языка lobster, также flatbuffers и программист в нескольких AAA-проектах</em><br>(в unity — C#, в unreal — blueprints, в dagor engine — daScript)</p><p><a href="https://grimfandango.network/features/articles/lua-in-grim-fandango">Lua in Grim Fandango</a> — история <a href="https://www.lua.org/doc/hopl.pdf">первого</a> использования lua в качестве скриптового языка.</p><p>Телефоны/консоли также на поздней фазе развития — запаса мощности часто хватает для того, чтобы запихнуть “дорогие” абстракции, увеличивающие как время компиляции, так и время выполнения кода. Для казуальных и прочих “простых” игр — раз в 5-10. Т.е. в принципе можно вообще использовать в 5-10 раз более медленный язык для реализации всей логики, ради того, чтобы сделать удобнее гейм-дизайнерам.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
      <category term="gamedev" scheme="http://spiiin.github.io/tags/gamedev/"/>
    
  </entry>
  
  <entry>
    <title>Трюки с сериализацией на clang от Valve</title>
    <link href="http://spiiin.github.io/blog/1495987502/"/>
    <id>http://spiiin.github.io/blog/1495987502/</id>
    <published>2024-05-19T23:02:00.000Z</published>
    <updated>2024-05-19T23:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Пара докладов с GDC ~2012<br><a href="https://www.gdcvault.com/play/1015586/">Robustification Through Introspection and Analysis Tools (Avoiding Developer Taxes)</a><br><a href="https://www.gdcvault.com/play/1020065/Physics-for-Game-Programmers-Debugging">Physics for Game Programmers: Debugging Physics</a></p><blockquote><p>“Налоги” — это то, что непосредственно не приносит пользу продукту, но упрощает жизнь. Примеры для геймдева — сериализация, статистика памяти, привязка к скриптам, версионирование</p></blockquote><p>Примеры того, что сделали, распарсив код с помощью Clang:</p><p><strong><code>Сериализация</code></strong></p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">A0</span><span style="color: #E6E6E6"> {</span><span style="color: #569CD6">float</span><span style="color: #E6E6E6"> x; byte y;}</span></span><span class="line"><span style="color: #569CD6">char</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> A0_type[] </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> {</span><span style="color: #CE9178">&quot;FB&quot;</span><span style="color: #E6E6E6">};</span><span style="color: #6A9955"> //подставляется из сгенерированного типа</span></span><span class="line"><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">save_any</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">void*</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">obj</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">char*</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">type</span><span style="color: #E6E6E6">) {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #C586C0">while</span><span style="color: #E6E6E6"> (</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">type) { </span><span style="color: #C586C0">switch</span><span style="color: #E6E6E6"> (</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">type</span><span style="color: #D4D4D4">++</span><span style="color: #E6E6E6">) {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #C586C0">case</span><span style="color: #E6E6E6"> </span><span style="color: #CE9178">&#39;F&#39;</span><span style="color: #E6E6E6">:</span><span style="color: #6A9955"> //write(); obj += sizeof(float);</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #C586C0">case</span><span style="color: #E6E6E6"> </span><span style="color: #CE9178">&#39;B&#39;</span><span style="color: #E6E6E6">:</span><span style="color: #6A9955"> //write(); obj += sizeof(byte);</span></span><span class="line"><span style="color: #E6E6E6">  ...</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #C586C0">case</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6">: </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">  }}</span></span><span class="line"><span style="color: #E6E6E6">}</span></span></code></pre></div></div></figure><p>Можно отследить по диффам изменения форматов и генерировать код сериализации/десериализации для разных версий структуры + отслеживать перемещение полей между структурами</p><p><strong><code>Slim bindings</code></strong></p><p>“Трамплины” для обвязок функций для скриптого языка</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">typedef</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> (*</span><span style="color: #9CDCFE">func_int__int_charptr</span><span style="color: #E6E6E6">)(</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">i</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">char*</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">c</span><span style="color: #E6E6E6">)</span><span style="color: #6A9955"> //для каждого типа сигнатур</span></span><span class="line"><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">trampoline</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">void**</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">buf</span><span style="color: #E6E6E6">, </span><span style="color: #4EC9B0">func_int__int_charptr</span><span style="color: #E6E6E6">) {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #569CD6">int</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> ret </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">int</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">)</span><span style="color: #9CDCFE">buf</span><span style="color: #E6E6E6">[</span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6">];</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #569CD6">int</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> arg0 </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">int</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">)</span><span style="color: #9CDCFE">buf</span><span style="color: #E6E6E6">[</span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">];</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #569CD6">char</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> arg1 </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">char</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">)</span><span style="color: #9CDCFE">buf</span><span style="color: #E6E6E6">[</span><span style="color: #B5CEA8">2</span><span style="color: #E6E6E6">];</span></span><span class="line"><span style="color: #E6E6E6">  ret </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> (</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">funcptr)(arg0,arg1);</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"><span style="color: #6A9955">// и потом:</span></span><span class="line"><span style="color: #6A9955">//call_in_lua() -&gt; lua_bridge-&gt; (на разные трамплины) trampoline_int__int_charptr-&gt;native(int, char*)</span></span></code></pre></div></div></figure><p>В трамплин передаётся структура, описывающая сигнатуру функции. Делается ради экономии места в бинарнике на сгенерированных скриптовых lua-привязках — вместо создания кода привязки для каждой отдельной функции создаётся трамплин для каждой функции и описания данных для трамплина. Требует одной дополнительной индирекции на каждый вызов функции. Можно даже шарить трамплины между разными привязками к языкам (lua_bridge/python_bridge)</p><p><strong><code>Подсчёт используемой памяти в рантайме</code></strong></p><p>Если для каждого типа знаем его структуру и размер, то можем просуммировать и вывести отчёт с визуализацией</p><p><strong><code>Внешние тулзы для просмотра типов</code></strong></p><ul><li>можно просмотреть, какие типы POD и хорошо сериализуются, а какие требуют runtime-цикла с сериализацией отдельных членов</li><li>по json с описанием типов можно восстановить padding в структурах, визуально</li></ul><p>А также дифф этого из vcs</p><ul><li><a href="/blog/1170009669/" title="Расположение объектов C++ в памяти. Часть 2">Расположение объектов C++ в памяти. Часть 2</a> — другие попытки получить padding в структурах</li></ul><p><strong><code>Передача blob-а и десериализация в другом процессе</code></strong><br>Данные из игры выдёргиваются и передаются в программу отладки физики</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;Пара докла
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
      <category term="llvm" scheme="http://spiiin.github.io/tags/llvm/"/>
    
  </entry>
  
  <entry>
    <title>C++ computational quadrants</title>
    <link href="http://spiiin.github.io/blog/2220953486/"/>
    <id>http://spiiin.github.io/blog/2220953486/</id>
    <published>2024-05-19T20:11:42.000Z</published>
    <updated>2024-05-19T20:11:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><ul><li><a href="/blog/4174799834/" title="C++ Metaprogramming - ссылки">C++ Metaprogramming - ссылки</a> — ссылки по метапрограммированию в C++</li></ul><p>Увидел в доках <a href="https://boostorg.github.io/hana/">boost.hana</a> разделение типов вычислений в C++ на 4 типа (я не понимаю, как Louis Dionne сложил их в квадранты). Ну и, соответственно, внутри C++ существует 4 языка для того, чтобы описывать эти типы вычислений.</p><p><strong><code>1. Runtime computations</code></strong> — “usual computations”. Примитивы для таких вычислений — рантайм контейнеры, функции и алгоритмы (std как пример базового фреймворка)</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> f </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> [](</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">i</span><span style="color: #E6E6E6">) -&gt; </span><span style="color: #569CD6">std::string</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> std::</span><span style="color: #DCDCAA">to_string</span><span style="color: #E6E6E6">(i </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> i);</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #E6E6E6">std::vector</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">int</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> ints{</span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">2</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">3</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">4</span><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #E6E6E6">std::</span><span style="color: #DCDCAA">transform</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">ints</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">begin</span><span style="color: #E6E6E6">(), </span><span style="color: #9CDCFE">ints</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">end</span><span style="color: #E6E6E6">(), std::</span><span style="color: #DCDCAA">back_inserter</span><span style="color: #E6E6E6">(strings), f);</span></span></code></pre></div></div></figure><p><strong><code>2. Constexpr computations</code></strong> — constexpr вычисления компилятором. Синтаксис для таких вычислений поддерживается максимально похожим на C++. Можно воспринимать их, как код для отдельной ограниченной платформы (компилятора), которая не поддерживает выделение памяти или исключения. (<a href="https://github.com/bolero-MURAKAMI/Sprout">Sprout</a> — пример библиотеки контейнеров, функций и алгоритмов для таких вычислений)</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">factorial</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">n</span><span style="color: #E6E6E6">) {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> n </span><span style="color: #D4D4D4">==</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">0</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">?</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">:</span><span style="color: #E6E6E6"> n </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">factorial</span><span style="color: #E6E6E6">(n </span><span style="color: #D4D4D4">-</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">, std::</span><span style="color: #569CD6">size_t</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">N</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">F</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> std::array</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">std::</span><span style="color: #4EC9B0">invoke_result_t</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">F, T</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6">, N</span><span style="color: #D4D4D4">&gt;</span></span><span class="line"><span style="color: #DCDCAA">transform</span><span style="color: #E6E6E6">(std::array</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">T, N</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> array, F f) {</span></span><span class="line"><span style="color: #6A9955">  // ...</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> std::array</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">4</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> ints{{</span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">2</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">3</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">4</span><span style="color: #E6E6E6">}};</span></span><span class="line"><span style="color: #569CD6">constexpr</span><span style="color: #E6E6E6"> std::array</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">4</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> facts </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">transform</span><span style="color: #E6E6E6">(ints, factorial);</span></span></code></pre></div></div></figure><p><strong><code>3. Heterogeneous computations</code></strong> — гетерогенные вычисления. Работа с суммами  и произведениями типов(<code>std::variant/std::tuple/std::any</code>). <a href="https://www.boost.org/doc/libs/1_80_0/libs/fusion/doc/html/">Boost.Fusion</a> как пример библиотеки.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> to_string </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> [](</span><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">t</span><span style="color: #E6E6E6">) {</span></span><span class="line"><span style="color: #E6E6E6">  std::stringstream ss;</span></span><span class="line"><span style="color: #E6E6E6">  ss </span><span style="color: #D4D4D4">&lt;&lt;</span><span style="color: #E6E6E6"> t;</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">ss</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">str</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #E6E6E6">fusion::vector</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6">, std::string, </span><span style="color: #569CD6">float</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> seq{</span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">, </span><span style="color: #CE9178">&quot;abc&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #B5CEA8">3.4f</span><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #E6E6E6">fusion::vector</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">std::string, std::string, std::string</span><span style="color: #D4D4D4">&gt;</span></span><span class="line"><span style="color: #E6E6E6">  strings </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> fusion::</span><span style="color: #DCDCAA">transform</span><span style="color: #E6E6E6">(seq, to_string);</span></span></code></pre></div></div></figure><p><strong><code>4. Type-level computations</code></strong> — вычисления над типами. <a href="https://www.boost.org/doc/libs/1_85_0/libs/mpl/doc/index.html">Boost.MPL</a> как пример библиотеки</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">T</span><span style="color: #E6E6E6">&gt;</span></span><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">add_const_pointer</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">type</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> T </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #E6E6E6"> </span></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">types</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> mpl::</span><span style="color: #4EC9B0">vector</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">int</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">char</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">float</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6">&gt;;</span></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">pointers</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> mpl::transform&lt;</span><span style="color: #4EC9B0">types</span><span style="color: #E6E6E6">, </span><span style="color: #4EC9B0">add_const_pointer</span><span style="color: #E6E6E6">&lt;mpl::</span><span style="color: #4EC9B0">_1</span><span style="color: #E6E6E6">&gt;&gt;::</span><span style="color: #4EC9B0">type</span><span style="color: #E6E6E6">;</span></span></code></pre></div></div></figure><h2><span id="optimizacii">Оптимизации</span><a href="#optimizacii" class="header-anchor">#</a></h2><p><a href="https://youtu.be/EtU4RDCCsiU?si=xZPfpHsV06l5B1gz&amp;t=570">C++Now 2017: Odin Holmes “Type Based Template Metaprogramming is Not Dead”</a> — доклад про оптимизацию вычислений над типами (<code>Rule of Chiel</code>). Для compile-time вычислений таким заморачиваются редко, нужно хорошо представлять себе, что приблизительно должен сделать под капотом компилятор, раскрывая тот или иной шаблонный код. Без такого представления время компиляции и размер выходного кода становятся непредсказумыми (точнее, предсказумо большими).</p><p><a href="https://stackoverflow.com/questions/2351148/explicit-template-instantiation-when-is-it-used">Explicit template instantiation - when is it used?</a> — явная специализация шаблонов как приём оптимизации.</p><ul><li><a href="/blog/1465137776/" title="Профилирование размера программы">Профилирование размера программы</a> — замеры и оптимизации размера бинарника (борьба с кодом шаблонов и инлайнгом).</li></ul><h2><span id="obshchee">Общее</span><a href="#obshchee" class="header-anchor">#</a></h2><p><a href="https://www.youtube.com/watch?v=NNU6cbG96M4">Don’t constexpr All the Things - David Sankel CppNow 2021</a> — обзор ограничений constexpr computations. И идеи по замене ограниченного языка constexpr на полноценный язык времени компиляции равный языку времени выполнения (не C++).</p><p><a href="https://github.com/boostcon/2010_presentations/raw/master/mon/instantiations_must_go.pdf">Matt Calabrese, Zachary Laine: Instantiations Must Go!</a> — слайды про то, как трансформировать синтаксис type-level computations в Heterogeneous computations (на 1 внутренний язык в c++ меньше), основная идея Boost.Hana.</p><p><a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0633r0.pdf">Exploring the design space of metaprogramming and reflection</a> — варианты дизайна рефлексии в C++ через Type syntax/Heterogeneous value/Homogeneous value syntax (2,3 и 4 “квадранты”)<br><a href="https://youtu.be/NWIsRFDaHhs?si=kwX_viciHp91AwK0&amp;t=850">Reflection in C++ Next - Anton Bikineev - Meeting C++ 2017</a> — тайминг доклада с примерами реализаций этими способами</p><p><a href="https://youtu.be/tcyb1lpEHm0?si=PgwOTQ-cc_LkpIv5&amp;t=2367">The next big Thing - Andrei Alexandrescu - Meeting C++ 2018 Opening Keynote</a> — (тайминг) Александреску рассказывает про интроспецию с видом человека, который её придумал. В его терминологии это генерация произвольного кода во время компиляции. Input - чтение любого кода (в proposals), processing - выполнение любого кода в compile-time (wip), output - генерация любого кода (отсутствует совсем).</p><h2><span id="za-predelami-c">За пределами C++</span><a href="#za-predelami-c" class="header-anchor">#</a></h2><ul><li><a href="/blog/4109146319/" title="daScript macro-3">daScript macro-3</a> — работа с AST языка, как базовый способ метапрограммирования без создания <a href="https://probablydance.com/2015/02/16/ideas-for-a-programming-language-part-3-no-shadow-worlds/">теневых миров</a></li><li><a href="/blog/3121981810/" title="Важность простых языков">Важность простых языков</a> — маленькие языки проще и для работы с ними на мета-уровне</li></ul><p><a href="https://ikrima.dev/dev-notes/clang/clang-libtooling-ast/">Clang/LibTooling AST Notes</a> — интерфейсы к Clang для работы с AST. Метапрограммирование не “на C++”, а “с использованием C++”, без ожидания принятия стандартов, их имплементации, и миграции библиотек.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Профилирование размера программы</title>
    <link href="http://spiiin.github.io/blog/1465137776/"/>
    <id>http://spiiin.github.io/blog/1465137776/</id>
    <published>2024-05-15T21:49:45.000Z</published>
    <updated>2024-05-15T21:49:45.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><p>Старый, но местами по прежнему актуальный цикл статей от авторов Despair Engine (F.E.A.R. 3) (<a href="https://gamearchitect.net/2008/04/15/an-anatomy-of-despair-introduction/">An Anatomy of Despair: Introduction</a>)</p><p>Автор выделяет 2 школы писателей игровых движков.</p><p><strong><code>Low-level Faction</code></strong> - работающие с ранними консолями типа PS1 и DreamCast, работающие close to metal, избегая лишних абстракций и ориентирующиеся больше на тюнинг кода игры, а не движка. Майк Актон с его “<strong>Software isn’t platofrm, hardware is platform!</strong>“ как представитель этой школы. <code>Halo</code> как пример.</p><p><strong><code>Abstraction Faction</code></strong> - автор приводит сюда Epic с их “отдадим 10% производительности за 50% ускорения в создании контекта” из доклада Тима Суини, и их блюпринты (хотя не совсем корректно считать такие небольшие отступления прямо согласием использовать абстракции, достаточно посмотреть на разницу их рендера для ios и android, <strong>hardware definitively is platform!</strong>). <code>Gear of War</code> как пример игры.</p><p><em>Выбор фракции частично зависит не от идеологии разработчиков, а от волн развития технологий — на ранних стадиях на платформах может не быть нормальной стандартной библиотеки, или нестандартное железо, а на поздних — можно позволить себе занять свободные ресурсы системы</em></p><p><em>Код у представителей обеих факций ОЧЕНЬ разный, но обвешать абстракциями low-level код сильно проще, чем выбросить abstraction, когда ими обмазано всё. Сложно вытащить клоунов из набитой ими машины, лучше их туда не пускать - <a href="https://youtu.be/p65Yt20pw0g?t=112">ссылка</a></em></p><p>Сам движок <code>Despair</code> использовал шаблоны, контейнеры stl и куски boost. Отчасти последствие такого выбора — в блоге его коллеги, треть которого посвящена тому, как сделать, чтобы бинарник хоть как-то вмещался в память. Цикл статей полезен и сейчас, для таких же апологетов абстракций.</p><p><img src="/blog/1465137776/barbar_small.png" alt><br><em>если я заплатил за телефон с 4 гигабайтами оперативки, то моя программа должна использовать все 4</em></p><blockquote><p>Very few programmers, in my experience, really think about what the compiler and linker are doing with the code they write.  They design their code in C++, they write their code in C++, and of course they debug their code in C++.  Their view of the programs they write begins and ends at that level, which is certainly understandable since there is more than enough to worry about in C++ alone.</p></blockquote><p><a href="http://gameangst.com/?p=226">http://gameangst.com/?p=226</a> Minimizing Code Bloat: Template Overspecialization<br><a href="http://gameangst.com/?p=212">http://gameangst.com/?p=212</a> Minimizing Code Bloat: Excessive Inlining<br><a href="http://gameangst.com/?p=222">http://gameangst.com/?p=222</a> Minimizing Code Bloat: Static Allocations<br><a href="http://gameangst.com/?p=224">http://gameangst.com/?p=224</a> Minimizing Code Bloat: Incorrect Inlining<br><a href="http://gameangst.com/?p=246">http://gameangst.com/?p=246</a> Minimizing Code Bloat: Redundant Template Instantiation (extern templates)</p><p>Чуть более поздние исследования и тулзы:<br><a href="https://aras-p.info/projSizer.html">https://aras-p.info/projSizer.html</a> - лид-программист Unity<br><a href="https://github.com/MolecularMatters/raw_pdb">https://github.com/MolecularMatters/raw_pdb</a> - от авторов мертвого уже движка <a href="https://blog.molecular-matters.com/">Molecule Engine</a> (блог местами тоже хорош)</p><p><a href="https://github.com/google/bloaty">https://github.com/google/bloaty</a> - гугловая мерялка (dwarf, экспериментально exe и wasm)<br><a href="https://github.com/microsoft/SizeBench">https://github.com/microsoft/SizeBench</a> - и microsoft (по pdb)<br><a href="https://github.com/surma/wasmphobia">https://github.com/surma/wasmphobia</a> - wasm build size viewer as flamegraph (<a href="/blog/2779627234/" title="Flamegraphs">Flamegraphs</a> — вообще везде хороши)</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;p&gt;Старый, но
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
      <category term="link" scheme="http://spiiin.github.io/tags/link/"/>
    
  </entry>
  
  <entry>
    <title>daScript - binding tricks 2</title>
    <link href="http://spiiin.github.io/blog/1528253159/"/>
    <id>http://spiiin.github.io/blog/1528253159/</id>
    <published>2024-04-03T12:35:05.000Z</published>
    <updated>2024-04-03T12:35:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><ul><li><a href="/blog/1908536621/" title="daScript - binding tricks">daScript - binding tricks</a></li></ul><p>Ещё несколько примеров байндингов типов из <code>C++</code> и <code>daScript</code>.</p><h2><span id="standart-layout-struktury">Standart-layout структуры</span><a href="#standart-layout-struktury" class="header-anchor">#</a></h2><p>Пустой базовый класс C++:<br><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">MyClass</span></span><span class="line"><span style="color: #E6E6E6">{</span></span><span class="line"><span style="color: #569CD6">public:</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> hidden;</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">printMyClass</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">MyClass</span><span style="color: #569CD6">&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">a</span><span style="color: #E6E6E6">) {</span></span><span class="line"><span style="color: #E6E6E6">    std::cout </span><span style="color: #D4D4D4">&lt;&lt;</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">a</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">hidden</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">&lt;&lt;</span><span style="color: #E6E6E6"> std::endl;</span></span><span class="line"><span style="color: #E6E6E6">}</span></span></code></pre></div></div></figure><br>(переменная hidden — просто для проверок, что класс инициализирован)</p><p>Привязка его к daScript:</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">MyClassAnnotation</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">final</span><span style="color: #E6E6E6"> : ManagedStructureAnnotation&lt;</span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #DCDCAA">MyClassAnnotation</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">ModuleLibrary</span><span style="color: #569CD6">&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">ml</span><span style="color: #E6E6E6">) : </span><span style="color: #DCDCAA">ManagedStructureAnnotation</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;MyClass&quot;</span><span style="color: #E6E6E6">, ml) {</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">init</span><span style="color: #E6E6E6">() {</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #DCDCAA">MAKE_TYPE_FACTORY</span><span style="color: #E6E6E6">(MyClass, MyClass);</span></span></code></pre></div></div></figure><p>..и добавление в модуль</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">Module_Tutorial</span><span style="color: #E6E6E6"> : </span><span style="color: #569CD6">public</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">Module</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #569CD6">public:</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #DCDCAA">Module_Tutorial</span><span style="color: #E6E6E6">() : </span><span style="color: #DCDCAA">Module</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;tutorial&quot;</span><span style="color: #E6E6E6">) {</span><span style="color: #6A9955">   // module name, when used from das file</span></span><span class="line"><span style="color: #E6E6E6">        ModuleLibrary </span><span style="color: #DCDCAA">lib</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #9CDCFE">lib</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">addBuiltInModule</span><span style="color: #E6E6E6">();</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #DCDCAA">addAnnotation</span><span style="color: #E6E6E6">(</span><span style="color: #DCDCAA">make_smart</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">MyClassAnnotation</span><span style="color: #E6E6E6">&gt;(lib));</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #DCDCAA">addCtorAndUsing</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6">&gt;(</span><span style="color: #D4D4D4">*</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">, lib, </span><span style="color: #CE9178">&quot;MyClass&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #CE9178">&quot;MyClass&quot;</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #DCDCAA">addExtern</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">DAS_BIND_FUN</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">printMyClass</span><span style="color: #E6E6E6">)&gt;(</span><span style="color: #D4D4D4">*</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">, lib, </span><span style="color: #CE9178">&quot;printMyClass&quot;</span><span style="color: #E6E6E6">, SideEffects::worstDefault, </span><span style="color: #CE9178">&quot;printMyClass&quot;</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #DCDCAA">REGISTER_MODULE</span><span style="color: #E6E6E6">(Module_Tutorial);</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">...</span></span><span class="line"><span style="color: #6A9955">//где-то в регистрации модулей</span></span><span class="line"><span style="color: #DCDCAA">NEED_MODULE</span><span style="color: #E6E6E6">(Module_Tutorial);</span></span></code></pre></div></div></figure><p>определение <code>ManagedStructureAnnotation</code> выглядит как:</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;</span><span style="color: #569CD6">typename</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">,</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> canNew </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> is_default_constructible&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::</span><span style="color: #569CD6">value</span><span style="color: #E6E6E6">,</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> canDelete </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> canNew </span><span style="color: #D4D4D4">&amp;&amp;</span><span style="color: #E6E6E6"> is_destructible&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::</span><span style="color: #569CD6">value</span></span><span class="line"><span style="color: #E6E6E6">&gt; </span><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">ManagedStructureAnnotation</span><span style="color: #E6E6E6"> ;</span></span></code></pre></div></div></figure><p>Это структура разбирает данные о типе <code>OT</code> с помощью <code>std::type_traits</code> и устанавливает его свойства, на основе которых daScript знает, что можно/нельзя делать с типом.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">virtual</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">hasNonTrivialCtor</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">!</span><span style="color: #E6E6E6">is_trivially_constructible&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::value;</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"><span style="color: #569CD6">virtual</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">hasNonTrivialDtor</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">!</span><span style="color: #E6E6E6">is_trivially_destructible&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::value;</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"><span style="color: #569CD6">virtual</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">hasNonTrivialCopy</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6">  </span><span style="color: #D4D4D4">!</span><span style="color: #E6E6E6">is_trivially_copyable&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::value</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #D4D4D4">||</span><span style="color: #E6E6E6">  </span><span style="color: #D4D4D4">!</span><span style="color: #E6E6E6">is_trivially_copy_constructible&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::value;</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"><span style="color: #569CD6">virtual</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">isPod</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> is_standard_layout&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::value </span><span style="color: #D4D4D4">&amp;&amp;</span><span style="color: #E6E6E6"> is_trivial&lt;</span><span style="color: #4EC9B0">OT</span><span style="color: #E6E6E6">&gt;::value;</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">virtual</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">canMove</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">!</span><span style="color: #DCDCAA">hasNonTrivialCopy</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"><span style="color: #569CD6">virtual</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">canCopy</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">!</span><span style="color: #DCDCAA">hasNonTrivialCopy</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">}</span></span></code></pre></div></div></figure><p>Пока всё тривиально, <code>MyClass</code> — standart layout структура, не требующая дополнительной инициализации.<br><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//объявления на стеке</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> c1 </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> [[MyClass]] </span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> c2 </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> MyClass()</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> c3 : MyClass</span></span><span class="line"><span style="color: #E6E6E6">printMyClass(c1) </span><span style="color: #6A9955">//0</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//или на хипе</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> c4 </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #C586C0">new</span><span style="color: #E6E6E6"> MyClass()</span></span><span class="line"><span style="color: #E6E6E6">printMyClass(</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">c4) </span><span style="color: #6A9955">//0</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//или создание временного объекта с помощью идиомы using:</span></span><span class="line"><span style="color: #E6E6E6">using() </span><span style="color: #D4D4D4">&lt;|</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">$</span><span style="color: #E6E6E6"> ( </span><span style="color: #569CD6">var</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">c5</span><span style="color: #E6E6E6">: MyClass# )</span></span><span class="line"><span style="color: #E6E6E6">    printMyClass(c5) </span><span style="color: #6A9955">//0</span></span></code></pre></div></div></figure></p><h2><span id="non-standart-layout-klassy">Non standart layout классы</span><a href="#non-standart-layout-klassy" class="header-anchor">#</a></h2><p>Попробуем добавить в класс что-нибудь, что потребует его инициализации:</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">MyClass</span></span><span class="line"><span style="color: #E6E6E6">{</span></span><span class="line"><span style="color: #569CD6">public:</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> hidden </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">42</span><span style="color: #E6E6E6">;</span><span style="color: #6A9955"> //инициализация члена</span></span><span class="line"><span style="color: #E6E6E6">    std::string str;</span><span style="color: #6A9955"> //non-stardary layout член</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #DCDCAA">MyClass</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">MyClass</span><span style="color: #569CD6">&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">other</span><span style="color: #E6E6E6">) : </span><span style="color: #DCDCAA">str</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">other</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">str</span><span style="color: #E6E6E6">) {}</span><span style="color: #6A9955"> //copy-ctor</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">virtual</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">virtualFunction</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> {}</span><span style="color: #6A9955"> //virtual function</span></span><span class="line"><span style="color: #6A9955">    //</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #DCDCAA">MyClass</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">char*</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">data</span><span style="color: #E6E6E6">): </span><span style="color: #DCDCAA">str</span><span style="color: #E6E6E6">(data) {}</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #DCDCAA">MyClass</span><span style="color: #E6E6E6">() </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">default</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//...</span></span><span class="line"><span style="color: #6A9955">//привязки</span></span><span class="line"><span style="color: #DCDCAA">addCtorAndUsing</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">char</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">&gt;(</span><span style="color: #D4D4D4">*</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">, lib, </span><span style="color: #CE9178">&quot;MyClass&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #CE9178">&quot;MyClass&quot;</span><span style="color: #E6E6E6">)-&gt;</span><span style="color: #DCDCAA">args</span><span style="color: #E6E6E6">({ </span><span style="color: #CE9178">&quot;str&quot;</span><span style="color: #E6E6E6"> });</span></span><span class="line"><span style="color: #DCDCAA">addCtorAndUsing</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6">, </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">MyClass</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">&gt;(</span><span style="color: #D4D4D4">*</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">, lib, </span><span style="color: #CE9178">&quot;MyClass&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #CE9178">&quot;MyClass&quot;</span><span style="color: #E6E6E6">)-&gt;</span><span style="color: #DCDCAA">args</span><span style="color: #E6E6E6">({ </span><span style="color: #CE9178">&quot;other&quot;</span><span style="color: #E6E6E6"> });</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">_method_100</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> das::</span><span style="color: #4EC9B0">das_call_member</span><span style="color: #E6E6E6">&lt; </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6">(MyClass::</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">)() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6">, </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">MyClass::</span><span style="color: #4EC9B0">virtualFunction</span><span style="color: #E6E6E6"> &gt;;</span></span><span class="line"><span style="color: #DCDCAA">makeExtern</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">DAS_CALL_METHOD</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">_method_100</span><span style="color: #E6E6E6">), </span><span style="color: #4EC9B0">SimNode_ExtFuncCall</span><span style="color: #E6E6E6">&gt;(lib, </span><span style="color: #CE9178">&quot;virtualFunction&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #CE9178">&quot;das::das_call_member&lt; void(MyClass::*)(), &amp;MyClass::virtualFunction &gt;::invoke&quot;</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #D4D4D4">-&gt;</span><span style="color: #DCDCAA">addToModule</span><span style="color: #E6E6E6">(</span><span style="color: #D4D4D4">*</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">, SideEffects::worstDefault);</span></span></code></pre></div></div></figure><p>Байндинг класса при перекомпиляции “увидит”, что теперь класс нетривиальный, и правильно переопределит его свойства. Теперь класс не может быть локальным, не может быть скопирован или перемещён:<br><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">canCopy</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> { </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">false</span><span style="color: #E6E6E6">; }</span></span><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">canMove</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> { </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">false</span><span style="color: #E6E6E6">; }</span></span><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">isLocal</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> { </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">false</span><span style="color: #E6E6E6">; }</span></span></code></pre></div></div></figure></p><p>Соотвественно, тот же код на daScript выдаст ошибки компиляции, при попытке создать класс без инициализации:<br><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//можно создать класс на хипе:</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> a </span><span style="color: #D4D4D4">&lt;-</span><span style="color: #E6E6E6"> </span><span style="color: #C586C0">new</span><span style="color: #E6E6E6"> MyClass(</span><span style="color: #CE9178">&quot;hello heap&quot;</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6">printMyClass( </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">a ) </span><span style="color: #6A9955">//42</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//можно создать временный объект с помощью using:</span></span><span class="line"><span style="color: #E6E6E6">using(</span><span style="color: #CE9178">&quot;hello temp&quot;</span><span style="color: #E6E6E6">) </span><span style="color: #D4D4D4">&lt;|</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">$</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">var</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">c5</span><span style="color: #E6E6E6">: MyClass </span><span style="color: #C586C0">explicit</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6">    printMyClass(c5) </span><span style="color: #6A9955">//42</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//можно создать временный объект на стеке и передать его в качестве параметра</span></span><span class="line"><span style="color: #6A9955">//(конструктор класса ничем не отличается от обычной функции)</span></span><span class="line"><span style="color: #E6E6E6">printMyClass(MyClass(</span><span style="color: #CE9178">&quot;hello temp&quot;</span><span style="color: #E6E6E6">))</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//нельзя создать объект, требующий перемещения (массив из одного элемента)</span></span><span class="line"><span style="color: #E6E6E6">printMyClass([[MyClass()]])</span></span><span class="line"><span style="color: #6A9955">//нельзя переместить объект</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> c1 </span><span style="color: #D4D4D4">&lt;-</span><span style="color: #E6E6E6"> MyClass()</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//нельзя скопировать объект</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> c1 </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> MyClass()</span></span></code></pre></div></div></figure></p><p><code>daScript</code> достаточно консервативно определяет, что объект нельзя копировать/перемещать, вообще говоря, если у класса есть конструктор копирования, то его можно разрешить копировать, если просто явно переопределить функцию canCopy в аннотации-обёртке класса</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> isCopyConstructable </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> std::is_copy_constructible&lt;</span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6">&gt;::value;</span></span><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">canCopy</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> { </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> isCopyConstructable; }</span></span><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">canClone</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> { </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> isCopyConstructable; }</span></span><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">canMove</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> { </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> isCopyConstructable; }</span></span><span class="line"><span style="color: #6A9955">//но нельзя создавать локальный переменные, так как они позволяет не инициализировать класс</span></span><span class="line"><span style="color: #569CD6">bool</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">isLocal</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">override</span><span style="color: #E6E6E6"> { </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">false</span><span style="color: #E6E6E6">; }</span></span></code></pre></div></div></figure><p><em>Если можно построить объект из другого объекта, то можно и copy/clone/move?</em></p><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//теперь можно copy/clone/move</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> a </span><span style="color: #D4D4D4">&lt;-</span><span style="color: #E6E6E6"> </span><span style="color: #C586C0">new</span><span style="color: #E6E6E6"> MyClass(</span><span style="color: #CE9178">&quot;hello heap&quot;</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> b </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #C586C0">new</span><span style="color: #E6E6E6"> MyClass()</span></span><span class="line"><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">b </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">a</span></span><span class="line"><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">b </span><span style="color: #D4D4D4">:=</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">a</span></span><span class="line"><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">b </span><span style="color: #D4D4D4">&lt;-</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">a</span></span></code></pre></div></div></figure><p>Также в unsafe блоке теперь можно делать небезопасные, но интересные штуки:<br><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #C586C0">struct</span><span style="color: #E6E6E6"> Params</span></span><span class="line"><span style="color: #E6E6E6">    a: MyClass</span></span><span class="line"><span style="color: #C586C0">unsafe</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #6A9955">//создаём локальную переменную на стеке</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> m </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> MyClass(</span><span style="color: #CE9178">&quot;hello_local&quot;</span><span style="color: #E6E6E6">)</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #6A9955">//создаём контейнер неинициализированных объектов</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #6A9955">//  которые можно построить позже в этой памяти</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #6A9955">//  (аналог placement new в c++)</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> n </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> [[MyClass(m)]]</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #6A9955">//создаём структуру из неинициализированных объектов</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #6A9955">//( аналог stackframe)</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> s : Params</span></span><span class="line"><span style="color: #E6E6E6">    printMyClass(s</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">a)</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #6A9955">//s.a |&gt; virtualFunction() //пока нельзя обращаться к объекту</span></span><span class="line"><span style="color: #E6E6E6">    s</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">a </span><span style="color: #D4D4D4">&lt;-</span><span style="color: #E6E6E6"> MyClass(</span><span style="color: #CE9178">&quot;hello_local&quot;</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6">    s</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">a </span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> virtualFunction() </span><span style="color: #6A9955">//vtable инициализирована</span></span><span class="line"><span style="color: #E6E6E6">    printMyClass(s</span><span style="color: #D4D4D4">.</span><span style="color: #E6E6E6">a) </span><span style="color: #6A9955">//42</span></span></code></pre></div></div></figure></p><h2><span id="argumenty-i-rezultaty">Аргументы и результаты</span><a href="#argumenty-i-rezultaty" class="header-anchor">#</a></h2><p>Если попытаться привязать такую функцию:<br><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">functionWithClassArgument</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">a</span><span style="color: #E6E6E6">) { }</span></span></code></pre></div></div></figure><br>компилятор начнёт ругаться на то, что не определён шаблон <code>cast_arg&lt;MyClass&gt;::to</code>. daScript-функции представляют свои аргументы и результаты в виде 128-битного типа <code>vec4f</code>, так что для кастомных типов необходимо описать способ преобразования с помощью частичной специализации этого шаблона.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;&gt; </span><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">cast_arg</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> __forceinline </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> MyClass</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">to</span><span style="color: #E6E6E6">(Context</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> ctx, SimNode</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> node) {</span></span><span class="line"><span style="color: #E6E6E6">        vec4f res </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">node</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">eval</span><span style="color: #E6E6E6">(ctx);</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">cast&lt;</span><span style="color: #4EC9B0">MyClass</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">&gt;::</span><span style="color: #DCDCAA">to</span><span style="color: #E6E6E6">(res);</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span></code></pre></div></div></figure><p>Другие примеры возможных способов определения преобразования:</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//если тип standart-layout и меньше 128 байт -- можно просто скопировать память</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;&gt; </span><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">cast_arg</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">ImVec2</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> __forceinline ImVec2 </span><span style="color: #DCDCAA">to</span><span style="color: #E6E6E6"> ( Context </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> ctx, SimNode </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> node ) {</span></span><span class="line"><span style="color: #E6E6E6">        vec4f res </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">node</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">eval</span><span style="color: #E6E6E6">(ctx);</span></span><span class="line"><span style="color: #E6E6E6">        ImVec2 v2;</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #DCDCAA">memcpy</span><span style="color: #E6E6E6">(</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">v2,</span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">res,</span><span style="color: #569CD6">sizeof</span><span style="color: #E6E6E6">(ImVec2));</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> v2;</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//для типов-хэндлеров можно указать способ приведения хэндлера к какому-нибудь базовому типу</span></span><span class="line"><span style="color: #6A9955">//  (каст указателей можно рассматривать как частный случай хэндлеров, уже определенных явно)</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;&gt; </span><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">cast_arg</span><span style="color: #E6E6E6">&lt;ax::NodeEditor::</span><span style="color: #4EC9B0">NodeId</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> __forceinline ax::NodeEditor::NodeId </span><span style="color: #DCDCAA">to</span><span style="color: #E6E6E6"> ( Context </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> ctx, SimNode </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> node ) {</span></span><span class="line"><span style="color: #E6E6E6">        vec4f res </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">node</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">eval</span><span style="color: #E6E6E6">(ctx);</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> ax::NodeEditor::</span><span style="color: #DCDCAA">NodeId</span><span style="color: #E6E6E6">(cast&lt;</span><span style="color: #569CD6">int32_t</span><span style="color: #E6E6E6">&gt;::</span><span style="color: #DCDCAA">to</span><span style="color: #E6E6E6">(res));</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;&gt; </span><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">cast_res</span><span style="color: #E6E6E6">&lt;ax::NodeEditor::</span><span style="color: #4EC9B0">NodeId</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> __forceinline vec4f </span><span style="color: #DCDCAA">from</span><span style="color: #E6E6E6"> ( ax::NodeEditor::NodeId node, Context </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> ) {</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> cast&lt;</span><span style="color: #569CD6">int32_t</span><span style="color: #E6E6E6">&gt;::</span><span style="color: #DCDCAA">from</span><span style="color: #E6E6E6">(</span><span style="color: #569CD6">int32_t</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">node</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">Get</span><span style="color: #E6E6E6">()));</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//для типов-прокси можно определить способ построения прокси из базового типа/извлечения базового типа</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;&gt; </span><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">cast_arg</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> sf::</span><span style="color: #4EC9B0">String</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> __forceinline sf::String </span><span style="color: #DCDCAA">to</span><span style="color: #E6E6E6"> ( Context </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> ctx, SimNode </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> node ) {</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #569CD6">char</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> pstr </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">node</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">evalPtr</span><span style="color: #E6E6E6">(ctx);</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> sf::</span><span style="color: #DCDCAA">String</span><span style="color: #E6E6E6">(pstr </span><span style="color: #D4D4D4">?</span><span style="color: #E6E6E6"> pstr </span><span style="color: #D4D4D4">:</span><span style="color: #E6E6E6"> </span><span style="color: #CE9178">&quot;&quot;</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"><span style="color: #569CD6">template</span><span style="color: #E6E6E6"> &lt;&gt; </span><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">cast_res</span><span style="color: #E6E6E6">&lt;sf::</span><span style="color: #4EC9B0">String</span><span style="color: #E6E6E6">&gt; {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">static</span><span style="color: #E6E6E6"> __forceinline vec4f </span><span style="color: #DCDCAA">from</span><span style="color: #E6E6E6"> ( </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6"> sf::String </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6"> str, Context </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6"> context ) {</span></span><span class="line"><span style="color: #E6E6E6"></span><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> text </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">context</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #9CDCFE">stringHeap</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">allocateString</span><span style="color: #E6E6E6">(str);</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> cast&lt;</span><span style="color: #569CD6">char</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">&gt;::</span><span style="color: #DCDCAA">from</span><span style="color: #E6E6E6">(text);</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span></code></pre></div></div></figure><p>Из пары примеров выше видно, что для привязки функций, возвращающих тип в качестве результата, необходимо определить специализацию шаблона <code>cast_res</code> с функцией <code>from</code>. Это верно для standard layout структур, но для сложного класса (с созданием временного объекта на хипе, по аналогии с sf::String) daScript бросает assert:</p><figure class="shiki"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">addExtern(getMyClass_ExtFuncCall)::failed</span></span><span class="line"><span style="color: #E6E6E6">  this function should be bound with addExtern&lt;DAS_BIND_FUNC(getMyClass_ExtFuncCall), SimNode_ExtFuncCallAndCopyOrMove&gt;</span></span><span class="line"><span style="color: #E6E6E6">  likely cast&lt;&gt; is implemented for the return type, and it should not</span></span></code></pre></div></div></figure><p>говорит этот ассерт о том, что вместо того, чтобы создавать временный объект, что тормознуто, лучше использовать специальную ноду языка, которая возвращает уже созданный объект. Такое себе принуждение к оптимизации.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">getMyClass</span><span style="color: #E6E6E6">() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6">{ </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">*</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">; }</span></span><span class="line"><span style="color: #E6E6E6">};</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">using</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">_method_2</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> das::</span><span style="color: #4EC9B0">das_call_member</span><span style="color: #E6E6E6">&lt; </span><span style="color: #4EC9B0">MyClass</span><span style="color: #E6E6E6">(MyClass::</span><span style="color: #D4D4D4">*</span><span style="color: #E6E6E6">)() </span><span style="color: #569CD6">const</span><span style="color: #E6E6E6">, </span><span style="color: #D4D4D4">&amp;</span><span style="color: #E6E6E6">MyClass::</span><span style="color: #4EC9B0">getMyClass</span><span style="color: #E6E6E6"> &gt;;</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//makeExtern&lt;DAS_CALL_METHOD(_method_2), SimNode_ExtFuncCall &gt;(lib, &quot;getMyClass_ExtFuncCall&quot;, &quot;das::das_call_member&lt; MyClass(MyClass::*)() const, &amp;MyClass::getMyClass &gt;::invoke&quot;)</span></span><span class="line"><span style="color: #6A9955">//    -&gt;addToModule(*this, SideEffects::worstDefault); //work with pod type, but not if type has something not trivial</span></span><span class="line"></span><span class="line"><span style="color: #DCDCAA">makeExtern</span><span style="color: #E6E6E6">&lt;</span><span style="color: #4EC9B0">DAS_CALL_METHOD</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">_method_2</span><span style="color: #E6E6E6">), </span><span style="color: #4EC9B0">SimNode_ExtFuncCallAndCopyOrMove</span><span style="color: #E6E6E6"> &gt;(lib, </span><span style="color: #CE9178">&quot;getMyClass_ExtFuncCallAndCopyOrMove&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #CE9178">&quot;das::das_call_member&lt; MyClass(MyClass::*)() const, &amp;MyClass::getMyClass &gt;::invoke&quot;</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #D4D4D4">-&gt;</span><span style="color: #DCDCAA">addToModule</span><span style="color: #E6E6E6">(</span><span style="color: #D4D4D4">*</span><span style="color: #569CD6">this</span><span style="color: #E6E6E6">, SideEffects::worstDefault);</span></span></code></pre></div></div></figure><p>Теперь в daScript можно использовать эти функции:</p><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">functionWithClassArgument(MyClass(</span><span style="color: #CE9178">&quot;hello arg&quot;</span><span style="color: #E6E6E6">))</span></span><span class="line"><span style="color: #E6E6E6">MyClass(</span><span style="color: #CE9178">&quot;hello res&quot;</span><span style="color: #E6E6E6">)</span><span style="color: #D4D4D4">|&gt;</span><span style="color: #E6E6E6"> getMyClass_ExtFuncCallAndCopyOrMove()</span></span></code></pre></div></div></figure><h2><span id="reflection-over-c">Reflection over C++</span><a href="#reflection-over-c" class="header-anchor">#</a></h2><p>Вся эта шаблонная магия привязок генерится не руками, а генератором привязок <a href="https://github.com/GaijinEntertainment/daScript/tree/master/modules/dasClangBind/bind">dasClangBind</a>. Распознавание инфы о типах сделано на уровне самого кода daScript, а не генератора, чтобы сам код генератора и сгенерированный код был более простым и однообразным. Но все примеры обёрток, сделанные <code>dasClingBind</code>, сделаны для библиотек с C-интерфейсом, которые почти не требуют ручного вмешательства. Но как только дело доходит до реального C++ кода, вылезает всё и сразу. Описанные в статье приёмы позволяют побороть большую часть сложности, и нагенерировать что-нибудь серьёзное, типа привязок классов <code>Unreal Engine</code> (с небольшими доработками напильником).</p><p>Примеры привязок либ с c-интерфейсом через <code>dasClangBind</code>:</p><ul><li><a href="/blog/4090909622/" title="daScript: C++ auto-bindings, msgpack">daScript: C++ auto-bindings, msgpack</a></li><li><a href="/blog/500729544/" title="daScript: C++ auto-bindings, assimp">daScript: C++ auto-bindings, assimp</a></li></ul><p>Другие подходы:<br><a href="https://floooh.github.io/2020/08/23/sokol-bindgen.html">Automatic Language Bindings</a> — размышления о способах генерации привязок к языкам от автора sokol gfx (тоже c-style, с помощью clang json)<br><a href="https://medium.com/@eddo2626/lets-learn-zig-4-using-c-libraries-in-zig-5fcc3206f0dc">Using C Libraries in Zig</a> — прозрачный импорт C из zig. с Си (не С++) вообще все достаточно просто<br><a href="https://scripter.co/binding-nim-to-c-plus-plus-std-list/">Binding Nim to C++ std::list</a> — читерский подход в nim, без интерпретации и с транспиляцией в C++ можно просто встраивать и использовать куски плюсового кода.<br><a href="https://github.com/seanbaxter/circle">Circle</a> — “бэтменский” альтернативный компилятор с встроенными compile-time фичами, включая рефлексию. Автор публикует прогресс в <a href="https://twitter.com/seanbax">твиттере</a><br><a href="https://cppyy.readthedocs.io/en/latest/">cppyy: Automatic Python-C++ bindings</a> — хардкор с использованием интерактивного компилятора C++ cling, прозрачный парсинг, компиляция и генерация привязок на лету</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
    
      <category term="dascript" scheme="http://spiiin.github.io/tags/dascript/"/>
    
  </entry>
  
  <entry>
    <title>daScript macro-3</title>
    <link href="http://spiiin.github.io/blog/4109146319/"/>
    <id>http://spiiin.github.io/blog/4109146319/</id>
    <published>2024-03-30T17:45:51.000Z</published>
    <updated>2024-03-30T17:45:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><ul><li><a href="/blog/1547564887/" title="daScript macro">daScript macro</a></li><li><a href="/blog/4046309382/" title="daScript macro - 2">daScript macro - 2</a></li></ul><p>В большинстве языков с развитым мета-программированием существует 2 способа написания макросов — построение синтаксического дерева из кирпичиков (<code>ExprXXX</code>-блоки в daScript), и с помощью цитирования (<code>quote/qmacro_xxx</code>). Примеры генерации каждым из способов — в предыдущей заметке.</p><p>Второй способ более компактный, но приводит к появлению мета-языка для внедрения кусков сгенерённого кода в цитируемый код. Проблема этого языка в том, что он разрастаётся — постепенно появляются различные макросы для деклараций блоков/функций/переменных (<a href="https://dascript.org/doc/reference/language/reification.html#quote-macros">qmacro macros</a>), различные способы внедрения кусков кода — подстановка выражений/идентификаторов/типа/списков аргументов (<a href="https://dascript.org/doc/reference/language/reification.html#escape-sequences">escape sequences</a>). Этот встроенный язык (причём частично на низком уровне, в <a href="https://github.com/GaijinEntertainment/daScript/blob/master/src/parser/ds_parser.ypp#L289">лексический парсер</a>) постепенно усложняется, в попытках охватить весь основной язык. </p><p><a href="https://probablydance.com/2015/02/16/ideas-for-a-programming-language-part-3-no-shadow-worlds/">Ideas for a Programming Language Part 3: No Shadow Worlds</a> — тут это явление названо “теневыми мирами”.</p><p>Проблема менее заметна в языках с однородный синтаксисом, как в LISP, когда всё представлено в виде списков, или с динамической типизацией, в которых не жалко производительности на вызов полноценного <code>eval</code>, принимающий строку кода и возвращающий строку результата. Всякие движки подстановки (<a href="https://github.com/GaijinEntertainment/daScript/blob/fd5be7b1eabaa2499e362481aa5f5409e07901fc/daslib/templates_boost.das">templates_boost</a>), которые работают на промежуточном уровне, решают проблему частично — они дают возможность заменять одни куски синтаксического дерева на другие, но своими правилами создают новые теневые миры.</p><p>Пример шаблона, который сейчас не осиливает разобрать <code>templates_boost</code>:</p><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//PARAMS нельзя сгенерировать кодом и подставить на это место ни одним правилом системы шаблонов</span></span><span class="line"><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> myStruct </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> [[Struct PARAMS]]</span></span></code></pre></div></div></figure><p><em>мета-язык ВСЕГДА требует ещё какое-нибудь мелкое расширение</em></p><p><a href="https://github.com/GaijinEntertainment/daScript/blob/master/daslib/spoof.das">spoof</a> — более мощные текстовые подстановки в daScript с PEG-парсингом (создание ещё одного мета-языка, который тоже будет требовать расширения со временем).</p><p>Собственно, мой поинт в том, чтобы махнуть рукой на несовершенство теневых миров, требующих расширения, и просто часть задач с макросами решать на уровне построения синтаксического дерева “вручную”. Набросал макрос для daScript, который разбирает ast-функции и аннотирует каждую ноду текстом с названием Expr-блока, представляющего эту ноду, чтобы было проще “срисовывать” синтаксическое дерево (похожий на <a href="https://nim-lang.org/docs/macros.html#dumpTree.m%2Cuntyped">dumpTree</a> в Nim).</p><p>Пример вывода:</p><figure class="shiki dascript"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #C586C0">options</span><span style="color: #E6E6E6"> optimize </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #C586C0">false</span><span style="color: #E6E6E6"> </span><span style="color: #6A9955">//отключаем оптимизации, если хотим посмотреть все AST-ноды</span></span><span class="line"><span style="color: #C586C0">require</span><span style="color: #E6E6E6"> expr_print</span></span><span class="line"></span><span class="line"><span style="color: #C586C0">struct</span><span style="color: #E6E6E6"> SaySomethingParams</span></span><span class="line"><span style="color: #E6E6E6">    a, b : </span><span style="color: #4EC9B0">int</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">def</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">function1</span><span style="color: #E6E6E6">()</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">var</span><span style="color: #E6E6E6"> params </span><span style="color: #D4D4D4">&lt;-</span><span style="color: #E6E6E6"> </span><span style="color: #C586C0">new</span><span style="color: #E6E6E6"> [[SaySomethingParams() a </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">, b </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #B5CEA8">2</span><span style="color: #E6E6E6">]]</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> params</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">[</span><span style="color: #569CD6">export</span><span style="color: #E6E6E6">]</span></span><span class="line"><span style="color: #569CD6">def</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">main</span><span style="color: #E6E6E6">()</span></span><span class="line"><span style="color: #E6E6E6">    print_expression(@@function1)</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//Output:</span></span><span class="line"><span style="color: #D4D4D4">---------</span><span style="color: #E6E6E6">Annotated expression</span><span style="color: #D4D4D4">---------</span></span><span class="line"><span style="color: #6A9955">// [nosideeffects]</span></span><span class="line"><span style="color: #C586C0">def</span><span style="color: #E6E6E6"> function1 : SaySomethingParams?</span></span><span class="line"><span style="color: #E6E6E6">        ExprLet </span><span style="color: #C586C0">let</span><span style="color: #E6E6E6"> ExprLetVariable params : SaySomethingParams? </span><span style="color: #D4D4D4">&lt;-</span><span style="color: #E6E6E6"> ExprAscend </span><span style="color: #C586C0">new</span><span style="color: #E6E6E6"> ExprMakeStruct [[SaySomethingParams ExprMakeStructField a </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> ExprConstInt </span><span style="color: #B5CEA8">1</span><span style="color: #E6E6E6">, ExprMakeStructField b </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> ExprConstInt </span><span style="color: #B5CEA8">2</span><span style="color: #E6E6E6">]]</span></span><span class="line"><span style="color: #E6E6E6">        ExprReturn </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> ExprVar params</span></span><span class="line"><span style="color: #D4D4D4">--------------------------------------</span></span></code></pre></div></div></figure><p>Красивее выглядит в терминале, который понимает цветовый коды:<br><img src="/blog/4109146319/screen_small.png" alt><br><a href="/blog/4109146319/screen.png">full-size</a></p><p>Код<br><a href="https://github.com/spiiin/dascript_print_expression">https://github.com/spiiin/dascript_print_expression</a></p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
    
      <category term="dascript" scheme="http://spiiin.github.io/tags/dascript/"/>
    
  </entry>
  
  <entry>
    <title>Push/Pull/Event model, Reactive GUI</title>
    <link href="http://spiiin.github.io/blog/3145708234/"/>
    <id>http://spiiin.github.io/blog/3145708234/</id>
    <published>2024-03-23T16:25:20.000Z</published>
    <updated>2024-03-23T16:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><h1><span id="push-pull-events-modeli">Push/Pull/Events модели</span><a href="#push-pull-events-modeli" class="header-anchor">#</a></h1><p>Регулярно повторяющаяся задача проектирования — выбор способа взаимодействия вызывающего и вызываемого кода.</p><p><strong><code>Pull-модель</code></strong> — “вам надо, вы и мучаетесь”. Часто реализовывается проще. Вызывающий код в том месте, в котором удобно, запрашивает данные.</p><p>Примеры<br><figure class="shiki"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">считывание настроек в стиле `game::get_setting&lt;string&gt;(&quot;blabla&quot;)`</span></span><span class="line"><span style="color: #E6E6E6">считывание 3D модели через render::load3dmodel(&quot;balbalb.xxx&quot;)</span></span><span class="line"><span style="color: #E6E6E6">опрос сервера клиентом для получения новых сообщений или обновлений</span></span><span class="line"><span style="color: #E6E6E6">игровой цикл, где игровой движок &quot;запрашивает&quot; состояние игрока или ввод данных в начале каждого кадра</span></span></code></pre></div></div></figure><br>Все загрузки, всё определение конфигурации и т.п. - размазано по коду и делается ad hoc.  </p><p><strong><code>Push-модель</code></strong> — “то же самое, но вывернутое наизнанку”. Вам приходит callback/event/change propagation “blabla setting changed old-&gt;new”. В системе жёстко вшито, когда именно происходит событие, и имеется возможность добавить свою реакцию на него.</p><p>Примеры<br><figure class="shiki"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">системы реального времени, где сенсоры отправляют данные на сервер или обработчик событий немедленно, как только они доступны</span></span><span class="line"><span style="color: #E6E6E6">системы уведомлений, где сервер пушит уведомления на устройства клиентов без необходимости запроса со стороны клиента</span></span></code></pre></div></div></figure></p><p>Все загрузки, конфигурации, управление ресурсами - вынесено наружу, делается более-менее централизованно. Вы регистрируетесь где попало и реагируете на обновления. Зато система без вас знает, когда, как и что делать.</p><p>Место определения колбека отделено от момента его вызова, вызывающий код должен понимать контекст, в котором будет вызван колбек — необходимо ли проверять на существование необходимые колбеку ресурсы, доступны ли они или заняты, безопасно ли создавать или удалять какие-либо типы объектов. Один из самых примитивных примеров — инвалидация итератора stl-контейнера в цикле в c++.</p><p><strong><code>Events-модель</code></strong></p><p>В push-моделях можно встретить элементы pull-модели:</p><ul><li>если объём данных для push большой и может быть не нужен клиентам полностью или сразу, система может только уведомить об изменившихся данных (послать сообщение) и предоставить pull-интерфейс для запроса этих данных, когда будет удобно клиенту</li><li>если удобно отложить обработку данных, коллбек может вместо выполнения работы положить сообщение в очередь. Дальше на клиента ложиться задача спуллить сообщения из очереди и обработать их. Удобно, если необходимо обработать все сообщения вместе. </li></ul><p>Примеры<br><figure class="shiki"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">отложенная обработка сгенерированных команд для подсистемы рендера</span></span><span class="line"><span style="color: #E6E6E6">отложенная обработка сообщений о столкновениях, чтобы проверить, что суммарные силы воздействии на физический объект не разрушат его</span></span></code></pre></div></div></figure></p><p><a href="http://www.kegel.com/c10k.html">The C10K problem</a> — взаимодействие большого количества сообщений в ОС.<br><a href="https://bitsquid.blogspot.com/2011/02/managing-decoupling-part-2-polling.html">Managing Coupling Part 2 — Polling, Callbacks and Events</a> — о push/pull/events модели от дизайнеров движка Stingray</p><h2><span id="patterny-idiomy-uzory">Паттерны/идиомы/узоры</span><a href="#patterny-idiomy-uzory" class="header-anchor">#</a></h2><p>В различных языках или библиотеках идеи и модели могут быть:<br><strong><code>прозрачные для пользователя</code></strong> — доступны в виде примитивов языка<br><strong><code>выражаемые формально</code></strong> — для использования можно переопределить функцию для своего типа/отнаследоваться от языка/написать синтаксический макрос/воспользоваться принятым в языке способом<br><strong><code>выражаемые неформально</code></strong> — для использования необходимо каждый раз повторно реализовывать функционал</p><p>Когда-то паттернами считались процедуры (1957, <a href="https://www.norvig.com/design-patterns/design-patterns.pdf">Design Patterns in Dynamic Programming</a>) и классы (1972, <a href="https://blog.plover.com/prog/design-patterns.html">Design patterns of 1972</a>). Прозрачные для пользователя  практически не обсуждаются (или даже не называются!), формально выраженные также часто принимаются как правило хорошего программирования. Разве что когда кому-нибудь не нравится производительность или ограничения в интерфейсе. В этом случае даже прозрачные идиомы могут быть реифицированны и переделаны. Пример — <a href="/blog/1552834708/" title="Runtime-полиморфизм в C++">Runtime-полиморфизм в C++</a>, альтернативный полиморфизм.</p><p>Может показаться, что называть что-то очень простое и примитивное паттерном слишком сёрьзно, но это всего лишь ярлыки.</p><p><a href="https://probablydance.com/2015/06/16/ideas-for-a-programming-language-part-4-reactive-programming/">Ideas for a Programming Language Part 4: Reactive Programming</a> — про поиск синтаксиса для того, чтобы ввернуть асинхронное программирование в язык прозрачно для пользователя</p><h2><span id="iteratory-kolsteki-korutiny-faybery-dispetchery-asinki-revisited">Итераторы, колстеки, корутины, файберы, диспетчеры, асинки — revisited</span><a href="#iteratory-kolsteki-korutiny-faybery-dispetchery-asinki-revisited" class="header-anchor">#</a></h2><ul><li><a href="/blog/2550823652/" title="Итераторы, колстеки, корутины">Итераторы, колстеки, корутины</a></li><li><a href="/blog/2826376146/" title="Файберы, диспетчеры, асинки">Файберы, диспетчеры, асинки</a></li></ul><p>Две большие статьи выше посвящены, по большому счёту, паттернам работы с коллекциями в различных языках (где-то эти “паттерны” уже вшиты в примитивы языка, где-то их нет и в стандартной библиотеке и приходилось писать самому).</p><p>Всё описанное в статьях можно классифицировать по 4 группам:<br><strong><code>операции с pull-итераторами в синхронных коллекциях</code></strong><br><strong><code>операции с push-итераторами в синхронных коллекциях</code></strong><br><strong><code>операции с pull-итераторами в асинхронных коллекциях</code></strong><br><strong><code>операции с push-итераторами в асинхронных коллекциях</code></strong></p><p>pull-итераторы — c++ stl-итераторы, <a href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerator-1?view=net-8.0">IEnumerator<t></t></a> C#<br>push-итераторы — колбеки<br>синхронные коллекции — контейнеры<br>асинхронные коллекции — генераторы (могут описывать как space-distributed коллекции, так и time-distributed)</p><p>Как и в общем для pull-моделей, pull-итераторы проще для использования/комбинирования — результаты, возвращаемый pull-итератором — стандартные типы языка, с которым учатся работать с самого начала знакомства с языком.</p><p>Push-итератор не возвращает ничего, и является отложенным вычислением (замыкания/указатели на функции/функциональные объекты). Отложенные вычисленя тоже можно комбинировать, но вместо привычных прикладному программисту на императивных языках способов требуются привычные математикам.</p><p><a href="https://aras-p.info/blog/2018/12/28/Modern-C-Lamentations/">“Modern” C++ Lamentations</a> — про разницу в синтаксисе и времени компиляции между C++ и C# при работе с лямбдами.<br><a href="https://www.youtube.com/watch?v=6mTbuzafcII">“Transducers” by Rich Hickey</a> — типичные проблемы комбинирования колбеков, как оторвать комбинирование вычислений от коллекций.</p><p>Даже просто запись цепочки выполняющихся друг за другом после окончания предыдущего колбеков превращается в анти-паттерн <code>callback hell</code> (синтаксический сахар async/await - количество скобок уменьшается)</p><figure class="shiki csharp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//.NET 4</span></span><span class="line"><span style="color: #4EC9B0">Task</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">string</span><span style="color: #E6E6E6">&gt; </span><span style="color: #9CDCFE">htmlTask</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">webClient</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">DownloadStringTaskAsync</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">url</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #6A9955">//тот можно выполнить код, которому не требуется результат hmtlTask</span></span><span class="line"><span style="color: #6A9955">//...</span></span><span class="line"><span style="color: #569CD6">string</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">html</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">htmlTask</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">Result</span><span style="color: #E6E6E6">; </span><span style="color: #6A9955">//тут блокировка до ожидания результата</span></span><span class="line"><span style="color: #6A9955">//или прикрепить к задаче продолжение</span></span><span class="line"><span style="color: #9CDCFE">htmlTask</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">ContinueWith</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">task</span><span style="color: #D4D4D4">=&gt;</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #569CD6">string</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">html</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">task</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">Result</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">})</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//.NET 5</span></span><span class="line"><span style="color: #4EC9B0">Task</span><span style="color: #E6E6E6">&lt;</span><span style="color: #569CD6">string</span><span style="color: #E6E6E6">&gt; </span><span style="color: #9CDCFE">htmlTask</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">webClient</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">DownloadStringTaskAsync</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">url</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #569CD6">string</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">html</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #569CD6">await</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">htmlTask</span><span style="color: #E6E6E6">; </span><span style="color: #6A9955">//то же что и в прошлом примере с ContinueWith</span></span><span class="line"><span style="color: #DCDCAA">doSomething</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">html</span><span style="color: #E6E6E6">)             </span><span style="color: #6A9955">//строки ниже await также &quot;переписываются&quot; внутрь ContinueWith</span></span></code></pre></div></div></figure><p>Паттерн <code>Task</code> (где-то встречается название <code>Future</code>) является обёрткой для асинхронной работы над примитивом. В статьях не хватает разбора способов асинхронной работы с коллекциями (синхронными и асинхронными).</p><h2><span id="obobshcheniya-patterna-task-v-c">Обобщения паттерна Task в C</span><a href="#obobshcheniya-patterna-task-v-c" class="header-anchor">#</a></h2><p><strong><code>pull-based работа синхронными коллекциями</code></strong> — если просто заменить <code>Task&lt;int&gt;</code> на <code>Task&lt;IEnumerable&lt;int&gt;&gt;</code>, то можно использовать <code>await</code> для коллекции, но при этом все элементы коллекции будут собираться синхронно за один вызов, в чём собственно нет особого смысла<br><strong><code>pull-based работа с асинхронными коллекциями</code></strong> — <a href="https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.iasyncenumerable-1?view=net-8.0"><code>IAsyncEnumerable&lt;T&gt;</code></a> и <code>await foreach</code> позволяет получать элементы коллекции асинхронно<br><strong><code>push-based работа с асинхронными коллекциями</code></strong> — push-вариант работы с асинхронными коллекциями — паттерн <code>Observer</code> (<a href="https://learn.microsoft.com/en-us/dotnet/api/system.iobserver-1?view=net-8.0"><code>IObserver&lt;T&gt;</code></a> в C#). Если <code>Task</code> представляет собой одно асинхронное событие, то <code>Observable</code> — это асинхронная коллекция (источник) событий, на которые могут подписываться <code>Observer</code>-ы.</p><h2><span id="observable-observer">Observable/Observer</span><a href="#observable-observer" class="header-anchor">#</a></h2><p><code>Observer</code> — давно известный паттерн, популяризованный в GoF, и активно используемый в smalltalk-версии паттерна <code>MVC</code>.<br><a href="https://stlab.cc/tips/about-mvc.html">How did MVC get so F’ed up?</a> — деградация MVC в языках с не-observable примитивами в качестве модели, мешает композиции.</p><p><code>Observable</code> в C# зовёт 3 метода <code>Observer</code> (<em>продолжение/окончание/ошибка</em>):<br><figure class="shiki"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #E6E6E6">OnCompleted() - последовательность закончилась</span></span><span class="line"><span style="color: #E6E6E6">OnError(exception) - при генерации данных произошла ошибка</span></span><span class="line"><span style="color: #E6E6E6">OnNext(value) - было сгенерированно следующее значение</span></span></code></pre></div></div></figure></p><p><code>Observable</code> можно представить как обобщение примитивного обхода коллекции (синхронной или асинхронной). При этом, как и для примитивного foreach, так и любых более сложных реализаций, должно соблюдаться простое правило: OnCompleted/OnError — это последний колбек, после которого Observable не будет присылать других.</p><p>Паттерн сам по себе не защищен от возможностей кривой композиции, так что периодически появляются теоретические попытки сделать что-то более чистое (но не всегда более простое).<br><a href="https://core.ac.uk/download/pdf/147982753.pdf">Deprecating the Observer Pattern with Scala.React</a> от Мартина Одерски, умершая либа. Вместо неё сейчас и сам Одерски <a href="https://stackoverflow.com/questions/21546456/what-happened-to-scala-react">предлагает</a> JavaRx, надстроенную над observer-ами.</p><p><strong><code>Reactive-подход</code></strong><br>Observer имеет те же особенности композиции, что и push-итераторы — близкие математикам или функциональным программистам примитивы, в C# местами завёрнутые в linq-синтаксис.</p><p><a href="https://reactivex.io/">ReactiveX</a> — библиотека реактивного программирования, набор примитивов для композиции и конвертеров между различными типами итераторов.<br><a href="https://kirkshoop.github.io/introductionToRxcpp">Introduction to ReactiveX in C++ (rxcpp)</a> — презентация по С++ версии библиотеки, heavy templates-based.<br><a href="https://introtorx.com/chapters/foreword">Introduction to RX.Net</a> — книга по C# версии.</p><figure class="shiki kotlin"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #6A9955">//kotlin example</span></span><span class="line"><span style="color: #DCDCAA">getDataFromNetwork</span><span style="color: #E6E6E6">()</span></span><span class="line"><span style="color: #E6E6E6">  .</span><span style="color: #DCDCAA">skip</span><span style="color: #E6E6E6">(</span><span style="color: #B5CEA8">10</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6">  .</span><span style="color: #DCDCAA">take</span><span style="color: #E6E6E6">(</span><span style="color: #B5CEA8">5</span><span style="color: #E6E6E6">)</span></span><span class="line"><span style="color: #E6E6E6">  .</span><span style="color: #DCDCAA">map</span><span style="color: #E6E6E6">({ s </span><span style="color: #569CD6">-&gt;</span><span style="color: #E6E6E6"> </span><span style="color: #C586C0">return</span><span style="color: #E6E6E6"> s </span><span style="color: #D4D4D4">+</span><span style="color: #E6E6E6"> </span><span style="color: #CE9178">&quot; transformed&quot;</span><span style="color: #E6E6E6"> })</span></span><span class="line"><span style="color: #E6E6E6">  .</span><span style="color: #DCDCAA">subscribe</span><span style="color: #E6E6E6">({ println </span><span style="color: #CE9178">&quot;onNext =&gt; &quot;</span><span style="color: #E6E6E6"> </span><span style="color: #D4D4D4">+</span><span style="color: #E6E6E6"> it })</span></span></code></pre></div></div></figure><h1><span id="gui">GUI</span><a href="#gui" class="header-anchor">#</a></h1><p>Можно разделить GUI-библиотеки на <code>imperative/declarative</code> и <code>retained/immediate/reactive</code>.</p><h2><span id="imperative-declarative">Imperative/Declarative</span><a href="#imperative-declarative" class="header-anchor">#</a></h2><p><strong><code>Imperative</code></strong> — установка состояние контролов описывается в коде<br><strong><code>Declarative</code></strong> — установка состояния вынесена куда-нибудь в JSON/XML/HTML или в динамический язык (lua/squirrel — бестиповые таблицы + лямбды удобны для описания представления и кода) и загружается с помощью <code>control-&gt;loadFromFile</code>. Из преимуществ — gui можно менять без перекомпиляции, программиста и с помощью тулзы, которая позволяет менять состояние мышкой.</p><p><a href="https://habr.com/ru/articles/719908/">WPF: контролы лишенные внешнего вида и неразрешимая задача выбора конфигурации темплейта</a> — более развернуто про то, что даёт декларативный подход<br><blockquote><p>Разработчики хотят, чтобы библиотека «угадала» их представление о том, как должен выглядеть и как должен работать тот или иной элемент визуального интерфейса. Соответственно, разработчики, как пользователи библиотеки, оказываются не готовы, что вместо того, чтобы искать готовые компоненты, надо научиться создавать их самому в парадигме того инструментария и тех концепций, которые реализованы в библиотеке.</p></blockquote></p><h2><span id="retained">Retained</span><a href="#retained" class="header-anchor">#</a></h2><p><strong><code>Retained</code></strong> — клиентский код не занимается рендером сам, а заполняет и обновляет модель. Push-модель, очень распространённая в GUI-библиотеках.</p><p>Пример, как может выглядеть код:<br><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> value;</span></span><span class="line"><span style="color: #E6E6E6">} state;</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> window </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> GUI::</span><span style="color: #DCDCAA">createRootWindow</span><span style="color: #E6E6E6">();</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> label </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> GUI::</span><span style="color: #DCDCAA">createLabel</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;Click counter %d&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #9CDCFE">state</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">value</span><span style="color: #E6E6E6">);</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> button </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> GUI::</span><span style="color: #DCDCAA">createButton</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #9CDCFE">button</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">setText</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;Increase counter&quot;</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #9CDCFE">button</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">setClickCallback</span><span style="color: #E6E6E6">([](){</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #9CDCFE">state</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">value</span><span style="color: #D4D4D4">++</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #6A9955">    //нужно не забыть руками обновить внутреннее состояние контрола, отображающего значение</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #9CDCFE">label</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">updateText</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;Click counter %d&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #9CDCFE">state</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">value</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #E6E6E6">});</span></span><span class="line"><span style="color: #9CDCFE">window</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">addChild</span><span style="color: #E6E6E6">(button);</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">//somewhere</span></span><span class="line"><span style="color: #C586C0">while</span><span style="color: #E6E6E6"> (</span><span style="color: #D4D4D4">!</span><span style="color: #E6E6E6">exit) {</span></span><span class="line"><span style="color: #E6E6E6">    GUI::</span><span style="color: #DCDCAA">updateRootWindow</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">}</span></span></code></pre></div></div></figure></p><p>Минусы — код обновления состояния модели (всего, что вне GUI), нужно синхронизировать с состоянием GUI.</p><p>Примеры либ - <a href="https://github.com/cegui/cegui">cegui</a></p><h2><span id="immediate">Immediate</span><a href="#immediate" class="header-anchor">#</a></h2><p><strong><code>Immediate</code></strong> — Pull-подход (“вам надо, вы и рисуйте”), <a href="https://caseymuratori.com/blog_0001">родившийся</a> в головах гейм-девелоперов. Если “вывернуть” наизнанку логику, и отдать обязанность рисования контролов клиенту, то логика местами станет проще (вместо угадывания потребностей клиента сложность переезжает в клиентский код, и отпадает необходимость синхронизации состояния). Функции рисования не имеют своего состояния, а принимают указатели на данные, которые они могут изменить.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">  </span><span style="color: #569CD6">int</span><span style="color: #E6E6E6"> value;</span></span><span class="line"><span style="color: #E6E6E6">} state;</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">Gui::</span><span style="color: #DCDCAA">Begin</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;My window&quot;</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #E6E6E6">Gui::</span><span style="color: #DCDCAA">Text</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;Counter %d&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #9CDCFE">state</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">value</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #C586C0">if</span><span style="color: #E6E6E6"> (Gui::</span><span style="color: #DCDCAA">Button</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;Increate counter&quot;</span><span style="color: #E6E6E6">))</span><span style="color: #6A9955"> //without explicit callback function</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #9CDCFE">state</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">value</span><span style="color: #D4D4D4">++</span><span style="color: #E6E6E6">;</span></span><span class="line"><span style="color: #E6E6E6">Gui::</span><span style="color: #DCDCAA">End</span><span style="color: #E6E6E6">();</span></span></code></pre></div></div></figure><p>Примеры либ — <code>Unity Imgui, Dear Imgui, Nuklear</code>.</p><h2><span id="reactive">Reactive</span><a href="#reactive" class="header-anchor">#</a></h2><p>Если под рукой есть язык или библиотека, который может описать зависимости между данными, то можно было бы устранить недостаток retained gui без перехода к immediate.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">struct</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    GUI::MagicObservable</span><span style="color: #D4D4D4">&lt;</span><span style="color: #569CD6">int</span><span style="color: #D4D4D4">&gt;</span><span style="color: #E6E6E6"> value;</span><span style="color: #6A9955"> //при изменении уведомлять всех наблюдателей</span></span><span class="line"><span style="color: #E6E6E6">} state;</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> window </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> GUI::</span><span style="color: #DCDCAA">createRootWindow</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> label </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> GUI::</span><span style="color: #DCDCAA">createLabel</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;Click counter %d&quot;</span><span style="color: #E6E6E6">, </span><span style="color: #9CDCFE">state</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">value</span><span style="color: #E6E6E6">);</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> button </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> GUI::</span><span style="color: #DCDCAA">createButton</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #9CDCFE">button</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">setText</span><span style="color: #E6E6E6">(</span><span style="color: #CE9178">&quot;Increase counter&quot;</span><span style="color: #E6E6E6">);</span></span><span class="line"><span style="color: #9CDCFE">button</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">setClickCallback</span><span style="color: #E6E6E6">([](){</span></span><span class="line"><span style="color: #6A9955">    //обновляем значение, observer уведомит об изменении все контролы. Прямого обновления label в коде больше нет</span></span><span class="line"><span style="color: #E6E6E6">    GUI::</span><span style="color: #DCDCAA">updateObservable</span><span style="color: #E6E6E6">(</span><span style="color: #9CDCFE">state</span><span style="color: #E6E6E6">.</span><span style="color: #9CDCFE">value</span><span style="color: #E6E6E6">); </span></span><span class="line"><span style="color: #E6E6E6">});</span></span><span class="line"><span style="color: #9CDCFE">window</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">addChild</span><span style="color: #E6E6E6">(button);</span></span></code></pre></div></div></figure><p>Примеры либ — <code>knockout.js, rivets</code> для js, <a href="https://www.reactiveui.net/">ReactiveUI</a> для C#,  <a href="https://github.com/tetsurom/rxqt">rxqt</a> для C++.<br><a href="https://www.youtube.com/watch?v=_d65qS0GzWM">MIX11 Knockout JS Helping you build dynamic JavaScript UIs with MVVM and ASP NET</a> — knockout.js demo<br><a href="https://knockoutjs.com/documentation/computed-dependency-tracking.html">How dependency tracking works</a> — knockout.js how it works</p><p>Knockout.js использует тривиальный динамический метод ослеживания зависимостей.</p><ul><li>Когда объявляется observable, вычисляется его initial-значение.</li><li>В ходе вычисления, устанавливается подписка на любые другие observables (включая computed observables), значения которых читаются (язык должен поддерживать хук на чтение значений). Подписка означает, что будет вызвано вычисление этого observable (шаг 1), при этом любые старые подписки удаляются.</li><li>После завершения вычисления, вызываются все подписки о том, что новое значение этого observable доступно.<br>Так что зависимости не вычисляются при первом запуске и их не нужно объявлять, они просто перерасчитываются каждый раз при обновлении, и могут изменяться динамически. Если эвалуатор observable не читает ни одного другого observable, от которого он зависит, то повторное вычисление никогда не произойдёт, и сам эвалуатор может быть заменён на вычисленное значение.</li><li>Декларативные биндинги данных к состоянию контролов — это просто computed observables.</li></ul><p><a href="https://habr.com/ru/articles/303650/">Введение в ReactiveUI: прокачиваем свойства во ViewModel</a> — В C# -&gt; WPF + XAML бекэнд + RX.Net для описания зависимостей + ReactiveUI.Fody для генерации</p><h2><span id="reactive-gui-na-c-i-geymdeve">Reactive Gui на C++ и геймдеве</span><a href="#reactive-gui-na-c-i-geymdeve" class="header-anchor">#</a></h2><p>Систему реактивного GUI можно разделить на 4 части:</p><ul><li>язык реализации (и, возможно, расширения) системы (C++)</li><li>язык для декларативного описания gui и байндингов контролов к данным</li><li>язык для описания скриптового поведения контролов (если хотим декларативно описывать поведение — в C++ сложно с рефлексией и интерпретацией кода)</li><li>тулза для визуального изменения декларативного описания</li></ul><p><a href="https://ru.wikipedia.org/wiki/Model-View-ViewModel">Model-View-ViewModel</a><br><a href="https://guide.elm-lang.org/architecture/">The Elm Architecture</a></p><p>Примеры Reactive GUI для геймдева встречаются не очень часто, но встречаются.</p><p><strong><code>imvue</code></strong><br><a href="https://github.com/Unix4ever/imvue/">imvue</a> — минималистичный проект-пример</p><ul><li>sdl/glew/imgui в качестве бекэнда для рендера gui, плюс кодоген ооп-обёртки вокруг imgui</li><li>lua в качестве скриптового языка и reactive-системы</li><li>libcss — html/css декларативное описание, в стиле шаблонов vue.js</li><li>без визуального редактора, так как игрушечная либа</li></ul><p><strong><code>xui</code></strong><br><a href="https://github.com/JayDT/XUI">XUI</a> — еще один демо-пример</p><ul><li>irrlicht в качестве бекэнда</li><li>C++ clang-based парсер для рефлексии, rxcpp и cpplinq для реактивности</li><li>xaml для декларативного описания, порт OmniXaml на C++</li></ul><p><strong><code>noesisengine</code></strong><br><a href="https://www.noesisengine.com/">noesisengine</a> — коммерческий проект</p><ul><li>свой рендер-бекэнд, рефлексия, редактор (+ экспорт из microsoft blend)</li><li>xaml в качестве декларативного описания</li></ul><p><strong><code>daRg</code></strong><br><a href="https://github.com/GaijinEntertainment/DagorEngine/tree/d3499602af19410703e6248439916778231f3878/prog/gameLibs/daRg">Dagor Reactive GUI</a> — гайдзиновский reactive gui</p><ul><li>своей рендер-бекэнд</li><li>quirrel (свой порт squirrel) в качестве декларативного описания, рефлексии и скриптового языка</li><li>свой визуальный редактор Dargbox</li></ul><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;h1&gt;&lt;span id=
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="cpp" scheme="http://spiiin.github.io/tags/cpp/"/>
    
      <category term="gamedev" scheme="http://spiiin.github.io/tags/gamedev/"/>
    
      <category term="dev" scheme="http://spiiin.github.io/tags/dev/"/>
    
  </entry>
  
  <entry>
    <title>Game Engines - Rendering Abstraction Layer</title>
    <link href="http://spiiin.github.io/blog/1364570417/"/>
    <id>http://spiiin.github.io/blog/1364570417/</id>
    <published>2024-03-10T13:50:05.000Z</published>
    <updated>2024-03-10T13:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css"><ul><li><a href="/blog/2721099263/" title="Ещё о проектировании (движки и история)">Ещё о проектировании (движки и история)</a> — заметка о GameObject в движках</li></ul><h2><span id="scenegraph-false-start">SceneGraph (False start)</span><a href="#scenegraph-false-start" class="header-anchor">#</a></h2><p>GameObject-ы на сцене часто собраны в иерархию, которую нужно как-то отрисовывать на экране. Наивная идея — отрисовка дерева GameObject-ов в порядке обхода.</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">GameObject</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">preRender</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">render</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">postRender</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">    TArray</span><span style="color: #D4D4D4">&lt;</span><span style="color: #E6E6E6">GameObject</span><span style="color: #D4D4D4">*&gt;</span><span style="color: #E6E6E6"> children;</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">GameObject::</span><span style="color: #DCDCAA">preRender</span><span style="color: #E6E6E6">() {</span></span><span class="line"><span style="color: #6A9955">    //set render state</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">GameObject::</span><span style="color: #DCDCAA">render</span><span style="color: #E6E6E6">() {</span></span><span class="line"><span style="color: #6A9955">    //render self</span></span><span class="line"><span style="color: #E6E6E6">    ...</span></span><span class="line"></span><span class="line"><span style="color: #6A9955">    //render children</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #C586C0">for</span><span style="color: #E6E6E6"> (</span><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> child : children) {</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #9CDCFE">child</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">preRender</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #9CDCFE">child</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">render</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #9CDCFE">child</span><span style="color: #E6E6E6">-&gt;</span><span style="color: #DCDCAA">postRender</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">GameObject::</span><span style="color: #DCDCAA">postRender</span><span style="color: #E6E6E6">() {</span></span><span class="line"><span style="color: #6A9955">    //restore render state</span></span><span class="line"><span style="color: #E6E6E6">}</span></span></code></pre></div></div></figure><p>Имеет множество проблем в реализации даже для старых render api — различные алгоритмы требуют различных способов обхода сцены, не укладывающихся в единый граф (как для 2D сцен, так и для 3D). Возникают альтернативные Visitor-ы, списки, флаги управления порядком. Примеры задач:</p><ul><li>для оптимизации выполнения команд рендера данные могут не отправляться на отрисовку сразу, а группироваться (batching) — добавляются хранимые списки данных для рендера и условия синхронизации этих списков с основным обходом объектов</li><li>опция рендера в текстуру - ещё один проход или альтернативное состояние рендера</li><li>трики с блендингом, для которых необходимо изменить порядок вывода на обратный (<a href="/blog/887709799/" title="daScript. SFML, dasBox и спайны">daScript. SFML, dasBox и спайны</a>)</li><li>другие методы отрисовки, требующие изменения порядка — полупрозрачные объекты (до OIT), тени, зеркала</li><li>композиция нескольких из этих приёмов. НЕ решается тем, чтобы ввести наследника GameObject, который бы переопределил preRender/postRender и втыкать его в нужные места графа. Если и решается, то прикручиваением колоссального количества хаков проверки и хранения текущего состояния.</li></ul><p>Тем не менее, подход был достаточно живучий (и оживший на какое-то время с приходом ранних OpenGL ES и WebGL), судя по количеству обсуждений его вредности:<br><a href="https://tomforsyth1000.github.io/blog.wiki.html#%5B%5BScene%20Graphs%20-%20just%20say%20no%5D%5D">Scene Graphs - just say no</a><br><a href="http://diaryofagraphicsprogrammer.blogspot.com/2009/01/handling-scene-geometry.html">Handling Scene Geometry</a><br><a href="https://www.stevestreeting.com/2009/01/05/spatialgraph-scenetree-renderqueue-sound-familiar/">SpatialGraph, SceneTree, RenderQueue - sound familiar?</a><br><a href="https://solid-angle.blogspot.com/2009/01/animation-and-physics-sitting-in-tree.html">The world is not a SceneTree</a>, <a href="https://solid-angle.blogspot.com/2009/01/world-is-not-scenetree.html">The world is not a SceneTree</a>, <a href="https://solid-angle.blogspot.com/2009/01/characters-are-special-sort-of-tree-but.html">Characters are a special sort of tree but not a SceneTree</a>, <a href="https://solid-angle.blogspot.com/2009/01/world-is-world.html">The world is… the world</a></p><h2><span id="spiski-komand-otrisovki">Списки команд отрисовки</span><a href="#spiski-komand-otrisovki" class="header-anchor">#</a></h2><p>Дизайн способа передачи данных отрисовки от игровых объектов к API видеокарты эволюционировал вместе с дизайном самих API отрисовки. Вместо отдельных команд переключения состояний и создания графических ресурсов постепенно появлялись буферы с данными (вершины, индексы, команды отрисовки) и команды отрисовки использующие эти буферы (“вот указатель на блоб данных, вот описание раскладки этих данных, выведи их”). </p><p>Соответственно, со стороны игрового движка так или иначе возникало формирование списка команд на отрисовку. Чаще отдельным слоем над графическим API (с названиями вроде Rendering Hardware Interface). Причины, по которым удобнее иметь отдельный уровень команд:</p><ul><li><strong>возможность отсортировать команды оптимальным образом перед передачей в графический API</strong> (или же в Data-Oriented style — заранее иметь фиксированный набор списков, в которые можно добавить объекты):<br>  <a href="https://realtimecollisiondetection.net/blog/?p=86">Order your graphics draw calls around!</a> — пример обоих вариантов<br>  <a href="https://bitsquid.blogspot.com/2017/02/stingray-renderer-walkthrough-4-sorting.html">Stingray Renderer Walkthrough #4: Sorting</a></li><li><strong>кеширование</strong><br>  <a href="https://www.youtube.com/watch?v=UJ6f1pm_sdU">Refactoring the Mesh Drawing Pipeline</a> — пайплайн в Unreal, добавляется ещё один этап кеширования команд отрисовки, статические меши могут не создавать команды каждый кадр повторно, чтобы не тратить время не повторное формирование команд<br>  <img src="/blog/1364570417/journey_of_draw.png" alt></li><li><strong>многопоточность</strong> — передачу состояния можно вынести в отдельный поток (а если потоков много, то ещё и отделить процесс декодирования из RHI-команд в списки команд графического API)<br>  <a href="https://bitsquid.blogspot.com/2016/09/state-reflection.html">State reflection</a> — 2 класса, состояние и прокси для его передачи<br>  <a href="https://github.com/donaldwuid/unreal_source_explained/blob/master/main/rendering.md">Unreal Source Explained, Rendering</a> — то же в Unreal, <code>UPrimitiveComponent-&gt;FPrimitiveSceneProxy-&gt;FPrimitiveSceneInfo</code> и другие</li><li><strong>разные стратегии на разных платформах</strong> — для различных платформ можно эмпирически настроить поведение, например, эмулировать устравшие immediate api,  подобрать оптимальный размер данных в очереди команд перед передачей на отрисовку (flush несколько раз за кадр), или настроить размер конвейера в зависимости от количества потоков (iOS - great single core/Android - many cores)<br>  <a href="https://github.com/donaldwuid/unreal_source_explained/blob/master/main/rendering_parallel.md">Unreal Source Explained, Parallel Rendering</a> — настройки параллельного рендера в Unreal</li></ul><p>Получается API вроде такого:</p><figure class="shiki cpp"><div class="codeblock"><div class="code"><pre class="shiki slack-dark"><code><span class="line"><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">GameObject</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #E6E6E6">    ResourceHandler resHandler;</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">initResources</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">RenderCommandList</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">cmdList</span><span style="color: #E6E6E6">) { resHandler </span><span style="color: #D4D4D4">=</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">cmdList</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">addCommand</span><span style="color: #E6E6E6">(CreateSomeResource{Parameters}); }</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">freeResourses</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">RenderCommandList</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">cmdList</span><span style="color: #E6E6E6">) { </span><span style="color: #9CDCFE">cmdList</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">addCommand</span><span style="color: #E6E6E6">(FreeResourceAsync{ resHandler }); }</span></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">render</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">RenderCommandList</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">cmdList</span><span style="color: #E6E6E6">) { </span><span style="color: #9CDCFE">cmdList</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">addCommand</span><span style="color: #E6E6E6">(DrawSomeResourceCommand { resHandler }); }</span></span><span class="line"><span style="color: #E6E6E6">}</span></span><span class="line"></span><span class="line"><span style="color: #569CD6">class</span><span style="color: #E6E6E6"> </span><span style="color: #4EC9B0">RenderCommandList</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #6A9955">    //threading, commands optimization, and batching things</span></span><span class="line"><span style="color: #E6E6E6">    DelayedCommandListMT delayedCommands;</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">addCommand</span><span style="color: #E6E6E6">(</span><span style="color: #4EC9B0">Command</span><span style="color: #E6E6E6"> </span><span style="color: #9CDCFE">cmd</span><span style="color: #E6E6E6">) {</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">if</span><span style="color: #E6E6E6"> (</span><span style="color: #DCDCAA">inRenderThread</span><span style="color: #E6E6E6">() </span><span style="color: #D4D4D4">&amp;&amp;</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">allowImmediate</span><span style="color: #E6E6E6">()) {</span></span><span class="line"><span style="color: #E6E6E6">            </span><span style="color: #DCDCAA">translateCommandToRenderDevice</span><span style="color: #E6E6E6">(cmd);</span></span><span class="line"><span style="color: #E6E6E6">        }</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">else</span><span style="color: #E6E6E6"> {</span></span><span class="line"><span style="color: #6A9955">            //maybe not just add, but also pre-process</span></span><span class="line"><span style="color: #E6E6E6">            </span><span style="color: #9CDCFE">delayedCommands</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">addNew</span><span style="color: #E6E6E6">(</span><span style="color: #DCDCAA">MOVE</span><span style="color: #E6E6E6">(cmd))</span></span><span class="line"><span style="color: #E6E6E6">        }</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"></span><span class="line"><span style="color: #E6E6E6">    </span><span style="color: #569CD6">void</span><span style="color: #E6E6E6"> </span><span style="color: #DCDCAA">processDelayedCommands</span><span style="color: #E6E6E6">(){</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #DCDCAA">ENSURE_IN_RENDER_THREAD</span><span style="color: #E6E6E6">();</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #9CDCFE">delayedCommands</span><span style="color: #E6E6E6">.</span><span style="color: #DCDCAA">preprocessCommands</span><span style="color: #E6E6E6">();</span><span style="color: #6A9955"> //sort/optimize/fuse/batch</span></span><span class="line"><span style="color: #E6E6E6">        </span><span style="color: #C586C0">for</span><span style="color: #E6E6E6"> (</span><span style="color: #569CD6">auto</span><span style="color: #E6E6E6"> cmd: delayedCommands) {</span></span><span class="line"><span style="color: #E6E6E6">            </span><span style="color: #DCDCAA">translateCommandToRenderDevice</span><span style="color: #E6E6E6">(cmd);</span></span><span class="line"><span style="color: #E6E6E6">        }</span></span><span class="line"><span style="color: #E6E6E6">    }</span></span><span class="line"><span style="color: #E6E6E6">}</span></span></code></pre></div></div></figure><p><a href="https://medium.com/realities-io/creating-a-custom-mesh-component-in-ue4-part-1-an-in-depth-explanation-of-vertex-factories-4a6fd9fd58f2">Creating a Custom Mesh Component in UE4</a> — серия из 4х статей, про добавление в пайплайн своего компонента, и структур для его обработки.<br><a href="https://medium.com/@lordned">Unreal Engine 4 Rendering</a> — ещё одна серия, небольшой обзор структур рендера.</p><h2><span id="intermediate-3d-api">Intermediate 3D API</span><a href="#intermediate-3d-api" class="header-anchor">#</a></h2><p>Так как графических API много и они разные, а движки часто хотят быть мультиплатформенными, то возникают попытки выделения нижнего уровня абстракции RHI в отдельные библиотеки-прослойки между DirectX 11/12/Vulkan/Metal/Opengl desktop/web/mobile. На этом уровне библиотека на заботится ни о чём, кроме быстрого формирования картинки из команд, не вникая в то, что представляют из себя эти команды (чем-то похоже на видеоплейеры).</p><p><a href="https://alain.xyz/blog/comparison-of-modern-graphics-apis">A Comparison of Modern Graphics APIs</a><br><a href="https://alextardif.com/RenderingAbstractionLayers.html">An Opinionated Post on Modern Rendering Abstraction Layers</a><br><a href="http://www.gijskaerts.com/wordpress/?p=98">Musings on cross-platform graphics engine architectures</a> + <a href="https://www.gijskaerts.com/wordpress/?p=112">Multi-threaded command recording and submission</a><br><a href="https://www.gamedeveloper.com/programming/designing-a-modern-cross-platform-low-level-graphics-library">Designing a Modern Cross-Platform Low-Level Graphics Library</a><br><a href="https://bitsquid.blogspot.com/2017/02/stingray-renderer-walkthrough.html">Stingray Renderer Walkthrough #5: RenderDevice</a></p><p><a href="https://dev.to/funatsufumiya/comparison-of-c-low-level-graphics-cross-platform-frameworks-and-libraries-58e5#llgl-low-level-graphics-library">Comparison of C++ Low-Level Graphics, Cross-Platform Frameworks and Libraries</a> — обзор нескольких библиотек.</p><p><code>sokol</code><br><a href="https://github.com/floooh/sokol">sokol-gfx</a> — thin-решение на C. Графическая обёртка отделена от всего, что только можно. Часто связанные с обёрткой решения выделены в отдельные библиотеки — <a href="https://github.com/floooh/sokol-tools/">sokol-shdc</a> для кросс-платформенных шейдеров, транспилируемых в нативные языки (annotated GLSL -&gt; platform shaders + c header) и <a href="https://github.com/floooh/oryol">oryol</a> для обёртки над окнами и IO.</p><p><code>bgfx</code><br><a href="https://github.com/bkaradzic/bgfx">bgfx</a> — кроме составления списка команд, умеет их <a href="https://bkaradzic.github.io/bgfx/internals.html">сортировать</a>, а также заполнять из нескольких потоков. Shaderc — компилятор шейдеров, надстройка на GLSL-like языком, транспилируемым в нативные языки.<br>Настраивается на использование с различными оконными обёртками (glfw/sdl/native os), имеет отдельные base-library <a href="https://github.com/bkaradzic/bx/">bx</a> (обёртки над io/threads primitives/math/memory/hash) и <a href="https://github.com/bkaradzic/bnet">bnet</a> (tcp protocol wrapper).</p><p><code>llgl</code><br><a href="https://github.com/LukasBanana/LLGL">llgl</a> — еще одна thin-прослойка для большинства платформ, без window- и shader- слоёв (из-за чего в примерах 100500 вариантов шейдеров на всех языках). Многопоточный command buffer поддерживается только для OpenGL-wrapper (<a href="https://github.com/LukasBanana/LLGL/blob/master/docu/GettingStarted/Getting%20Started%20with%20LLGL.pdf">не поддерживается</a> для DX12 и Vulkan). Имеет c-api для генерации привязок к языками (как и sokol/bgfx).</p><p><code>Diligent Engine</code><br><a href="https://github.com/DiligentGraphics/DiligentCore">Diligent Engine Core</a> — декларирует полную поддержку новых API, и ограниченную поддержку старых. Поддерживает генерацию команд из нескольких потоков, и вшитую на низком уровне систему <a href="http://diligentgraphics.com/diligent-engine/architecture/cross-platform/reference-counting/">Reference Counting</a>. Имеет C API для привязок к языкам (C++/C#). <a href="https://github.com/DiligentGraphics/DiligentFX">DiligentFX</a> - high-level слой поверх Core. <a href="http://diligentgraphics.com/">Блог</a> с обновлениями и описанием дизайна.</p><p><code>The Forge</code><br><a href="https://github.com/ConfettiFX/The-Forge">The Forge</a> — open-source прослойка, industry-level качества, разработчики предлагают услуги по помощи в интеграции в существующие движки (примеры — Forza Motorspirt и Starfield). Больше оптимизаций, высокий порог для старта, постепенное обрастание необходимыми для движка системами, не связанными с прослойкой для рендера (скорее всего, связанное с потребностями компаний, интегрирующих библиотеку).</p><h2><span id="shader-abstraction">Shader abstraction</span><a href="#shader-abstraction" class="header-anchor">#</a></h2><p>Так как языки для описания шейдеров похожие, но чуть отличающиеся, и требуют описания соотвествующих им структур и кода на C++, то библиотеки используют мета-языки — надстройки над одним из базовых языков (GLSL/HLSL + транспиляция в другие базовые языки) и/или DSL/схемы данных, по которым генерируется код привязки параметров к шейдеру.</p><p>Также, шейдеры требуют оптимизаций, поэтому опциональные фичи рендера, которые могут присутствовать или отсутствовать в материале, генерируют различные варианты шейдеров (с включенным и выключенным вариантом фичи). Поскольку каждая новая опция вдвое увеличивает количество вариантов шейдеров, необходимо предусмотреть возможности заданий ограничений вариантов в тех частях движка, которые взаимодействуют с системой материалов (скомпилировать заранее все варианты быстро становится невозможным).<br><a href="https://aras-p.info/blog/2017/02/05/Every-Possible-Scalability-Limit-Will-Be-Reached/">Every Possible Scalability Limit Will Be Reached</a> - эволюция системы материалов в Unity, от 5 вариантов шейдеров, до 100 миллиардов.</p><p>Идиомы систем материалов:</p><ul><li>code reuse (include-based)</li><li>uber-shader (substractive)</li><li>additive (nodes-based)</li><li>templates (material domain в unreal, surface shader в unity)</li></ul><p><img src="/blog/1364570417/destiny_shaders_small.png" alt><br><a href="https://www.gdcvault.com/play/1024231/-Destiny-Shader">Destiny’ Shader Pipeline</a></p><p><a href="https://aras-p.info/blog/2014/05/05/shader-compilation-in-unity-4-dot-5/">Shader compilation in Unity 4.5</a><br>GPU Pro 6 - Semantic-BasedShaderGenerationUsingShaderShaker</p><h2><span id="frame-graph">Frame Graph</span><a href="#frame-graph" class="header-anchor">#</a></h2><p>Отрисовка кадра игры состоит из большого количества этапов.</p><p>Примеры реверс-инжинирига пайплайна отрисовки кадра из различных игр:<br><a href="http://www.adriancourreges.com/blog/2016/09/09/doom-2016-graphics-study/">DOOM (2016) - Graphics Study</a><br><a href="https://80.lv/articles/world-of-tanks-graphical-update-technical-overview/">World of Tanks: Graphical Update Technical Overview</a><br><a href="https://astralcode.blogspot.com/2018/11/reverse-engineering-rendering-of.html">Reverse engineering the rendering of The Witcher 3</a><br><a href="https://godotengine.org/article/godot-3-renderer-design-explained">Godot 3’s Renderer Design Explained</a><br><a href="http://www.adriancourreges.com/blog/2015/11/02/gta-v-graphics-study/">GTA V - Graphics Study</a><br><a href="https://interplayoflight.wordpress.com/2017/10/25/how-unreal-renders-a-frame/amp/">How Unreal Renders a Frame</a><br><a href="https://c0de517e.blogspot.com/2020/12/hallucinations-re-rendering-of.html">Hallucinations re: the rendering of Cyberpunk 2077</a><br><a href="https://mamoniem.com/behind-the-pretty-frames-god-of-war/">Behind the Pretty Frames: God of War</a><br><a href="https://gamedev.ru/community/gamedev_lecture/articles/?id=718">Oblivion</a><br><a href="https://gamedev.ru/community/gamedev_lecture/articles/r_e_n_de_r">Stalker</a><br><a href="https://www.elopezr.com/">https://www.elopezr.com/</a> — Mafia, Nanite, Jurassic World, Rise of Tomb Raider, Shadow of Mordor, Castlevania<br><a href="https://users.livejournal.com/--vortex--/">https://users.livejournal.com/--vortex--/</a> — старенькое: Diablo 3, Starcraft 2, Jericho, Dirt, Company Of Heroes, Warhammer 40K: Dawn of War, Gothic 3, NFS Carbon, Painkiller, Flatout 2</p><p><a href="https://github.com/GaijinEntertainment/DagorEngine/blob/main/samples/skiesSample/prog/test_app.cpp">skySample</a> - тестовый пример из DagorEngine, описание рендера кадра на ~2к строк.<br><a href="https://github.com/ConfettiFX/The-Forge/blob/master/Examples_3/Aura/src/Aura.cpp">Aura</a> - аналогично из The-Forge, ~2к строк<br><a href="https://www.gdcvault.com/play/1024612/FrameGraph-Extensible-Rendering-Architecture-in">FrameGraph: Extensible Rendering Architecture in Frostbite</a> - список проходов Battlefield 4<br><img src="/blog/1364570417/frame_graph_1_small.png" alt></p><p>В универсальных движках возможны также настраиваемые этапы или различные пайплайны для различных платформ, а также дополнительный отладочный вывод, что делает описание еще более сложным.</p><p><a href="https://logins.github.io/graphics/2021/05/31/RenderGraphs.html">Why Talking About Render Graphs</a> — граф для описания этапов, и compile-time/runtime вычисления зависимостей используемых ресурсов меджу этапами.</p><div id="gitalk-container"></div><script src="https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js"></script><link rel="stylesheet" href="https://unpkg.com/gitalk/dist/gitalk.css"><script src="https://unpkg.com/gitalk/dist/gitalk.min.js"></script><script>var gitalkConfig = {"clientID":"Ov23liG1mZbiQOIdi91X","clientSecret":"e05812685eb741a752982b89dcf6f5b58dc10251","repo":"spiiin.github.io","owner":"spiiin","admin":["spiiin"],"distractionFreeMode":false};    gitalkConfig.id = md5(location.pathname);var gitalk = new Gitalk(gitalkConfig);    gitalk.render("gitalk-container");    </script><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text&amp;#x2F;css&quot; href=&quot;https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.3.1/dist/hexo-tag-hint.min.css&quot;&gt;&lt;ul&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
    
      <category term="dev_method" scheme="http://spiiin.github.io/tags/dev-method/"/>
    
      <category term="dev_evolution" scheme="http://spiiin.github.io/tags/dev-evolution/"/>
    
      <category term="3d" scheme="http://spiiin.github.io/tags/3d/"/>
    
      <category term="unreal" scheme="http://spiiin.github.io/tags/unreal/"/>
    
  </entry>
  
</feed>
